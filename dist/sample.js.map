{"mappings":"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","sources":["./node_modules/westures-core/src/Gesture.js","./node_modules/westures-core/src/Point2D.js","./node_modules/westures-core/src/constants.js","./node_modules/westures-core/src/PointerData.js","./node_modules/westures-core/src/utils.js","./node_modules/westures-core/src/Input.js","./node_modules/westures-core/src/State.js","./node_modules/westures-core/src/Region.js","./node_modules/westures-core/src/Smoothable.js","./node_modules/westures-core/index.js","./node_modules/westures/src/Pan.js","./node_modules/westures/src/Pinch.js","./node_modules/westures/src/Press.js","./node_modules/westures/src/Pull.js","./node_modules/westures/src/Pivotable.js","./node_modules/westures/src/Rotate.js","./node_modules/westures/src/Swipe.js","./node_modules/westures/src/Swivel.js","./node_modules/westures/src/Tap.js","./node_modules/westures/src/Track.js","./sample.js","./node_modules/westures/index.js"],"sourcesContent":["'use strict';\n\nlet g_id = 0;\n\n/**\n * The Gesture class that all gestures inherit from. A custom gesture class will\n * need to override some or all of the four phase \"hooks\": start, move, end, and\n * cancel.\n *\n * @memberof westures-core\n *\n * @param {string} type - The name of the gesture.\n * @param {Element} element - The element to which to associate the gesture.\n * @param {Function} handler - The function handler to execute when a gesture\n *    is recognized on the associated element.\n * @param {object} [options] - Generic gesture options\n * @param {westures-core.STATE_KEYS[]} [options.enableKeys=[]] - List of keys\n * which will enable the gesture. The gesture will not be recognized unless one\n * of these keys is pressed while the interaction occurs. If not specified or an\n * empty list, the gesture is treated as though the enable key is always down.\n * @param {westures-core.STATE_KEYS[]} [options.disableKeys=[]] - List of keys\n * which will disable the gesture. The gesture will not be recognized if one of\n * these keys is pressed while the interaction occurs. If not specified or an\n * empty list, the gesture is treated as though the disable key is never down.\n * @param {number} [options.minInputs=1] - The minimum number of pointers that\n * must be active for the gesture to be recognized. Uses >=.\n * @param {number} [options.maxInputs=Number.MAX_VALUE] - The maximum number of\n * pointers that may be active for the gesture to be recognized. Uses <=.\n */\nclass Gesture {\n  constructor(type, element, handler, options = {}) {\n    if (typeof type !== 'string') {\n      throw new TypeError('Gestures require a string type / name');\n    }\n\n    /**\n     * The name of the gesture. (e.g. 'pan' or 'tap' or 'pinch').\n     *\n     * @type {string}\n     */\n    this.type = type;\n\n    /**\n     * The unique identifier for each gesture. This allows for distinctions\n     * across instances of Gestures that are created on the fly (e.g.\n     * gesture-tap-1, gesture-tap-2).\n     *\n     * @type {string}\n     */\n    this.id = `gesture-${this.type}-${g_id++}`;\n\n    /**\n     * The element to which to associate the gesture.\n     *\n     * @type {Element}\n     */\n    this.element = element;\n\n    /**\n     * The function handler to execute when the gesture is recognized on the\n     * associated element.\n     *\n     * @type {Function}\n     */\n    this.handler = handler;\n\n    /**\n     * The options settings.\n     *\n     * @type {object}\n     */\n    this.options = { ...Gesture.DEFAULTS, ...options };\n  }\n\n  /**\n   * Determines whether this gesture is enabled.\n   *\n   * @param {westures-core.State} state - The input state object of the current\n   * region.\n   *\n   * @return {boolean} true if enabled, false otherwise.\n   */\n  isEnabled(state) {\n    const count = state.active.length;\n    const event = state.event;\n    const { enableKeys, disableKeys, minInputs, maxInputs } = this.options;\n\n    return (minInputs <= count) && (maxInputs >= count) &&\n      (enableKeys.length === 0 || enableKeys.some(k => event[k])) &&\n      !disableKeys.some(k => event[k]);\n  }\n\n  /**\n   * Event hook for the start phase of a gesture.\n   *\n   * @param {westures-core.State} state - The input state object of the current\n   * region.\n   *\n   * @return {?Object} Gesture is considered recognized if an Object is\n   *    returned.\n   */\n  start() {\n    return null;\n  }\n\n  /**\n   * Event hook for the move phase of a gesture.\n   *\n   * @param {westures-core.State} state - The input state object of the current\n   * region.\n   *\n   * @return {?Object} Gesture is considered recognized if an Object is\n   *    returned.\n   */\n  move() {\n    return null;\n  }\n\n  /**\n   * Event hook for the end phase of a gesture.\n   *\n   * @param {westures-core.State} state - The input state object of the current\n   * region.\n   *\n   * @return {?Object} Gesture is considered recognized if an Object is\n   *    returned.\n   */\n  end() {\n    return null;\n  }\n\n  /**\n   * Event hook for when an input is cancelled.\n   *\n   * @param {westures-core.State} state - The input state object of the current\n   * region.\n   *\n   * @return {?Object} Gesture is considered recognized if an Object is\n   *    returned.\n   */\n  cancel() {\n    return null;\n  }\n\n  /**\n   * Evalutes the given gesture hook, and dispatches any data that is produced\n   * by calling [recognize]{@link westures-core.Gesture#recognize}.\n   *\n   * @param {string} hook - Must be one of 'start', 'move', 'end', or 'cancel'.\n   * @param {westures-core.State} state - The current State instance.\n   */\n  evaluateHook(hook, state) {\n    const data = this[hook](state);\n    if (data) {\n      this.recognize(hook, state, data);\n    }\n  }\n\n  /**\n   * Recognize a Gesture by calling the handler. Standardizes the way the\n   * handler is called so that classes extending Gesture can circumvent the\n   * evaluateHook approach but still provide results that have a common format.\n   *\n   * Note that the properties in the \"data\" object will receive priority when\n   * constructing the results. This can be used to override standard results\n   * such as the phase or the centroid.\n   *\n   * @param {string} hook - Must be one of 'start', 'move', 'end', or 'cancel'.\n   * @param {westures-core.State} state - current input state.\n   * @param {Object} data - Results data specific to the recognized gesture.\n   */\n  recognize(hook, state, data) {\n    this.handler({\n      centroid: state.centroid,\n      event:    state.event,\n      phase:    hook,\n      type:     this.type,\n      target:   this.element,\n      ...data,\n    });\n  }\n}\n\nGesture.DEFAULTS = {\n  enableKeys:  [],\n  disableKeys: [],\n  minInputs:   1,\n  maxInputs:   Number.MAX_VALUE,\n};\n\nmodule.exports = Gesture;\n\n","'use strict';\n\n/**\n * The Point2D class stores and operates on 2-dimensional points, represented as\n * x and y coordinates.\n *\n * @memberof westures-core\n *\n * @param {number} [ x=0 ] - The x coordinate of the point.\n * @param {number} [ y=0 ] - The y coordinate of the point.\n */\nclass Point2D {\n  constructor(x = 0, y = 0) {\n    /**\n     * The x coordinate of the point.\n     *\n     * @type {number}\n     */\n    this.x = x;\n\n    /**\n     * The y coordinate of the point.\n     *\n     * @type {number}\n     */\n    this.y = y;\n  }\n\n  /**\n   * Calculates the angle between this point and the given point.\n   *\n   * @param {!westures-core.Point2D} point - Projected point for calculating the\n   * angle.\n   *\n   * @return {number} Radians along the unit circle where the projected\n   * point lies.\n   */\n  angleTo(point) {\n    return Math.atan2(point.y - this.y, point.x - this.x);\n  }\n\n  /**\n   * Determine the average distance from this point to the provided array of\n   * points.\n   *\n   * @param {!westures-core.Point2D[]} points - the Point2D objects to calculate\n   *    the average distance to.\n   *\n   * @return {number} The average distance from this point to the provided\n   *    points.\n   */\n  averageDistanceTo(points) {\n    return this.totalDistanceTo(points) / points.length;\n  }\n\n  /**\n   * Clone this point.\n   *\n   * @return {westures-core.Point2D} A new Point2D, identical to this point.\n   */\n  clone() {\n    return new Point2D(this.x, this.y);\n  }\n\n  /**\n   * Calculates the distance between two points.\n   *\n   * @param {!westures-core.Point2D} point - Point to which the distance is\n   * calculated.\n   *\n   * @return {number} The distance between the two points, a.k.a. the\n   *    hypoteneuse.\n   */\n  distanceTo(point) {\n    return Math.hypot(point.x - this.x, point.y - this.y);\n  }\n\n  /**\n   * Subtract the given point from this point.\n   *\n   * @param {!westures-core.Point2D} point - Point to subtract from this point.\n   *\n   * @return {westures-core.Point2D} A new Point2D, which is the result of (this\n   * - point).\n   */\n  minus(point) {\n    return new Point2D(\n      this.x - point.x,\n      this.y - point.y,\n    );\n  }\n\n  /**\n   * Return the summation of this point to the given point.\n   *\n   * @param {!westures-core.Point2D} point - Point to add to this point.\n   *\n   * @return {westures-core.Point2D} A new Point2D, which is the addition of the\n   * two points.\n   */\n  plus(point) {\n    return new Point2D(\n      this.x + point.x,\n      this.y + point.y,\n    );\n  }\n\n  /**\n   * Calculates the total distance from this point to an array of points.\n   *\n   * @param {!westures-core.Point2D[]} points - The array of Point2D objects to\n   *    calculate the total distance to.\n   *\n   * @return {number} The total distance from this point to the provided points.\n   */\n  totalDistanceTo(points) {\n    return points.reduce((d, p) => d + this.distanceTo(p), 0);\n  }\n\n  /**\n   * Calculates the centroid of a list of points.\n   *\n   * @param {westures-core.Point2D[]} points - The array of Point2D objects for\n   * which to calculate the centroid.\n   *\n   * @return {westures-core.Point2D} The centroid of the provided points.\n   */\n  static centroid(points = []) {\n    if (points.length === 0) return null;\n\n    const total = Point2D.sum(points);\n    total.x /= points.length;\n    total.y /= points.length;\n    return total;\n  }\n\n  /**\n   * Calculates the sum of the given points.\n   *\n   * @param {westures-core.Point2D[]} points - The Point2D objects to sum up.\n   *\n   * @return {westures-core.Point2D} A new Point2D representing the sum of the\n   * given points.\n   */\n  static sum(points = []) {\n    return points.reduce(\n      (total, pt) => {\n        total.x += pt.x;\n        total.y += pt.y;\n        return total;\n      },\n      new Point2D(0, 0),\n    );\n  }\n}\n\nmodule.exports = Point2D;\n\n","'use strict';\n\n/**\n * List of events that trigger the cancel phase.\n *\n * @memberof westures-core\n * @type {string[]}\n */\nconst CANCEL_EVENTS = [\n  'blur',\n  'pointercancel',\n  'touchcancel',\n  'mouseleave',\n];\n\n/**\n * List of keyboard events that trigger a restart.\n *\n * @memberof westures-core\n * @type {string[]}\n */\nconst KEYBOARD_EVENTS = [\n  'keydown',\n  'keyup',\n];\n\n/**\n * List of mouse events to listen to.\n *\n * @memberof westures-core\n * @type {string[]}\n */\nconst MOUSE_EVENTS = [\n  'mousedown',\n  'mousemove',\n  'mouseup',\n];\n\n/**\n * List of pointer events to listen to.\n *\n * @memberof westures-core\n * @type {string[]}\n */\nconst POINTER_EVENTS = [\n  'pointerdown',\n  'pointermove',\n  'pointerup',\n];\n\n/**\n * List of touch events to listen to.\n *\n * @memberof westures-core\n * @type {string[]}\n */\nconst TOUCH_EVENTS = [\n  'touchend',\n  'touchmove',\n  'touchstart',\n];\n\n/**\n * List of potentially state-modifying keys.\n * Entries are: ['altKey', 'ctrlKey', 'metaKey', 'shiftKey'].\n *\n * @memberof westures-core\n * @type {string[]}\n */\nconst STATE_KEYS = [\n  'altKey',\n  'ctrlKey',\n  'metaKey',\n  'shiftKey',\n];\n\n/**\n * List of the 'key' values on KeyboardEvent objects of the potentially\n * state-modifying keys.\n *\n * @memberof westures-core\n * @type {string[]}\n */\nconst STATE_KEY_STRINGS = [\n  'Alt',\n  'Control',\n  'Meta',\n  'Shift',\n];\n\n/**\n * The cancel phase.\n *\n * @memberof westures-core\n * @type {string}\n */\nconst CANCEL = 'cancel';\n\n/**\n * The end phase.\n *\n * @memberof westures-core\n * @type {string}\n */\nconst END = 'end';\n\n/**\n * The move phase.\n *\n * @memberof westures-core\n * @type {string}\n */\nconst MOVE = 'move';\n\n/**\n * The start phase.\n *\n * @memberof westures-core\n * @type {string}\n */\nconst START = 'start';\n\n/**\n * Object that normalizes the names of window events to be either of type start,\n * move, end, or cancel.\n *\n * @memberof westures-core\n * @type {object}\n */\nconst PHASE = {\n  blur:           CANCEL,\n  pointercancel:  CANCEL,\n  touchcancel:    CANCEL,\n\n  mouseup:       END,\n  pointerup:     END,\n  touchend:      END,\n\n  mousemove:   MOVE,\n  pointermove: MOVE,\n  touchmove:   MOVE,\n\n  mousedown:   START,\n  pointerdown: START,\n  touchstart:  START,\n};\n\nmodule.exports = {\n  CANCEL_EVENTS,\n  KEYBOARD_EVENTS,\n  MOUSE_EVENTS,\n  POINTER_EVENTS,\n  TOUCH_EVENTS,\n\n  STATE_KEYS,\n  STATE_KEY_STRINGS,\n\n  CANCEL,\n  END,\n  MOVE,\n  START,\n\n  PHASE,\n};\n\n","'use strict';\n\nconst Point2D   = require('./Point2D.js');\nconst { PHASE } = require('./constants.js');\n\n/**\n * @private\n * @inner\n * @memberof westures-core.PointerData\n *\n * @return {Event} The Event object which corresponds to the given identifier.\n *    Contains clientX, clientY values.\n */\nfunction getEventObject(event, identifier) {\n  if (event.changedTouches) {\n    return Array.from(event.changedTouches).find(touch => {\n      return touch.identifier === identifier;\n    });\n  }\n  return event;\n}\n\n/**\n * Low-level storage of pointer data based on incoming data from an interaction\n * event.\n *\n * @memberof westures-core\n *\n * @param {Event} event - The event object being wrapped.\n * @param {number} identifier - The index of touch if applicable\n */\nclass PointerData {\n  constructor(event, identifier) {\n    const { clientX, clientY } = getEventObject(event, identifier);\n\n    /**\n     * The original event object.\n     *\n     * @type {Event}\n     */\n    this.event = event;\n\n    /**\n     * The type or 'phase' of this batch of pointer data. 'start' or 'move' or\n     * 'end' or 'cancel'\n     *\n     * @type {string}\n     */\n    this.type = PHASE[event.type];\n\n    /**\n     * The timestamp of the event in milliseconds elapsed since January 1, 1970,\n     * 00:00:00 UTC.\n     *\n     * @type {number}\n     */\n    this.time = Date.now();\n\n    /**\n     * The (x,y) coordinate of the event, wrapped in a Point2D.\n     *\n     * @type {westures-core.Point2D}\n     */\n    this.point = new Point2D(clientX, clientY);\n  }\n}\n\nmodule.exports = PointerData;\n\n","'use strict';\n\nconst PI_2   = 2 * Math.PI;\nconst PI_NVE = -Math.PI;\n\n/**\n * Helper function to regulate angular differences, so they don't jump from 0 to\n * 2 * PI or vice versa.\n *\n * @memberof westures-core\n *\n * @param {number} a - Angle in radians.\n * @param {number} b - Angle in radians.\n\n * @return {number} c, given by: c = a - b such that |c| < PI\n */\nfunction angularDifference(a, b) {\n  let diff = a - b;\n  if (diff < PI_NVE) {\n    diff += PI_2;\n  } else if (diff > Math.PI) {\n    diff -= PI_2;\n  }\n  return diff;\n}\n\n/**\n * In case event.composedPath() is not available.\n *\n * @memberof westures-core\n *\n * @param {Event} event\n *\n * @return {Element[]} The elements along the composed path of the event.\n */\nfunction getPropagationPath(event) {\n  if (typeof event.composedPath === 'function') {\n    return event.composedPath();\n  }\n\n  const path = [];\n  for (let node = event.target; node !== document; node = node.parentNode) {\n    path.push(node);\n  }\n  path.push(document);\n  path.push(window);\n\n  return path;\n}\n\n/**\n * Performs a set filter operation.\n *\n * @memberof westures-core\n *\n * @param {Set} set - The set to filter.\n * @param {Function} predicate - Function to test elements of 'set'. Receives\n * one argument: the current set element.\n *\n * @return {Set} Set consisting of elements in 'set' for which 'predicate' is\n * true.\n */\nfunction setFilter(set, predicate) {\n  const result = new Set();\n  set.forEach(element => {\n    if (predicate(element)) {\n      result.add(element);\n    }\n  });\n  return result;\n}\n\n/**\n * Performs a set difference operation.\n *\n * @memberof westures-core\n *\n * @param {Set} left - Base set.\n * @param {Set} right - Set of elements to remove from 'left'.\n *\n * @return {Set} Set consisting of elements in 'left' that are not in\n * 'right'.\n */\nfunction setDifference(left, right) {\n  return setFilter(left, element => !right.has(element));\n}\n\nmodule.exports = {\n  angularDifference,\n  getPropagationPath,\n  setDifference,\n  setFilter,\n};\n\n","'use strict';\n\nconst PointerData = require('./PointerData.js');\nconst { getPropagationPath } = require('./utils.js');\n\n/**\n * Tracks a single input and contains information about the current, previous,\n * and initial events. Contains the progress of each Input and its associated\n * gestures.\n *\n * @memberof westures-core\n *\n * @param {(PointerEvent | MouseEvent | TouchEvent)} event - The input event\n * which will initialize this Input object.\n * @param {number} identifier - The identifier for this input, so that it can\n * be located in subsequent Event objects.\n */\nclass Input {\n  constructor(event, identifier) {\n    const currentData = new PointerData(event, identifier);\n\n    /**\n     * The set of elements along the original event's propagation path at the\n     * time it was dispatched.\n     *\n     * @type {WeakSet.<Element>}\n     */\n    this.initialElements = new WeakSet(getPropagationPath(event));\n\n    /**\n     * Holds the initial data from the mousedown / touchstart / pointerdown that\n     * began this input.\n     *\n     * @type {westures-core.PointerData}\n     */\n    this.initial = currentData;\n\n    /**\n     * Holds the most current pointer data for this Input.\n     *\n     * @type {westures-core.PointerData}\n     */\n    this.current = currentData;\n\n    /**\n     * Holds the previous pointer data for this Input.\n     *\n     * @type {westures-core.PointerData}\n     */\n    this.previous = currentData;\n\n    /**\n     * The identifier for the pointer / touch / mouse button associated with\n     * this input.\n     *\n     * @type {number}\n     */\n    this.identifier = identifier;\n  }\n\n  /**\n   * The phase of the input: 'start' or 'move' or 'end' or 'cancel'\n   *\n   * @type {string}\n   */\n  get phase() { return this.current.type; }\n\n  /**\n   * The timestamp of the initiating event for this input.\n   *\n   * @type {number}\n   */\n  get startTime() { return this.initial.time; }\n\n  /**\n   * @return {number} The distance between the initiating event for this input\n   *    and its current event.\n   */\n  totalDistance() {\n    return this.initial.point.distanceTo(this.current.point);\n  }\n\n  /**\n   * Saves the given raw event in PointerData form as the current data for this\n   * input, pushing the old current data into the previous slot, and tossing\n   * out the old previous data.\n   *\n   * @param {Event} event - The event object to wrap with a PointerData.\n   */\n  update(event) {\n    this.previous = this.current;\n    this.current = new PointerData(event, this.identifier);\n  }\n}\n\nmodule.exports = Input;\n\n","'use strict';\n\nconst {\n  CANCEL,\n  END,\n  MOVE,\n  PHASE,\n  START,\n} = require('./constants.js');\nconst Input     = require('./Input.js');\nconst Point2D   = require('./Point2D.js');\n\nconst symbols = {\n  inputs: Symbol.for('inputs'),\n};\n\n/**\n * Set of helper functions for updating inputs based on type of input.\n * Must be called with a bound 'this', via bind(), or call(), or apply().\n *\n * @private\n * @inner\n * @memberof westure-core.State\n */\nconst update_fns = {\n  TouchEvent: function TouchEvent(event) {\n    Array.from(event.changedTouches).forEach(touch => {\n      this.updateInput(event, touch.identifier);\n    });\n  },\n\n  PointerEvent: function PointerEvent(event) {\n    this.updateInput(event, event.pointerId);\n  },\n\n  MouseEvent: function MouseEvent(event) {\n    if (event.button === 0) {\n      this.updateInput(event, event.button);\n    }\n  },\n};\n\n/**\n * Keeps track of currently active and ending input points on the interactive\n * surface.\n *\n * @memberof westures-core\n *\n * @param {Element} element - The element underpinning the associated Region.\n */\nclass State {\n  constructor(element) {\n    /**\n     * Keep a reference to the element for the associated region.\n     *\n     * @type {Element}\n     */\n    this.element = element;\n\n    /**\n     * Keeps track of the current Input objects.\n     *\n     * @alias [@@inputs]\n     * @type {Map.<westures-core.Input>}\n     * @memberof westure-core.State\n     */\n    this[symbols.inputs] = new Map();\n\n    /**\n     * All currently valid inputs, including those that have ended.\n     *\n     * @type {westures-core.Input[]}\n     */\n    this.inputs = [];\n\n    /**\n     * The array of currently active inputs, sourced from the current Input\n     * objects. \"Active\" is defined as not being in the 'end' phase.\n     *\n     * @type {westures-core.Input[]}\n     */\n    this.active = [];\n\n    /**\n     * The array of latest point data for the currently active inputs, sourced\n     * from this.active.\n     *\n     * @type {westures-core.Point2D[]}\n     */\n    this.activePoints = [];\n\n    /**\n     * The centroid of the currently active points.\n     *\n     * @type {westures-core.Point2D}\n     */\n    this.centroid = {};\n\n    /**\n     * The latest event that the state processed.\n     *\n     * @type {Event}\n     */\n    this.event = null;\n  }\n\n  /**\n   * Deletes all inputs that are in the 'end' phase.\n   */\n  clearEndedInputs() {\n    this[symbols.inputs].forEach((v, k) => {\n      if (v.phase === 'end') this[symbols.inputs].delete(k);\n    });\n  }\n\n  /**\n   * @param {string} phase - One of 'start', 'move', 'end', or 'cancel'.\n   *\n   * @return {westures-core.Input[]} Inputs in the given phase.\n   */\n  getInputsInPhase(phase) {\n    return this.inputs.filter(i => i.phase === phase);\n  }\n\n  /**\n   * @param {string} phase - One of 'start', 'move', 'end', or 'cancel'.\n   *\n   * @return {westures-core.Input[]} Inputs <b>not</b> in the given phase.\n   */\n  getInputsNotInPhase(phase) {\n    return this.inputs.filter(i => i.phase !== phase);\n  }\n\n  /**\n   * @return {boolean} True if there are no active inputs. False otherwise.\n   */\n  hasNoInputs() {\n    return this[symbols.inputs].size === 0;\n  }\n\n  /**\n   * Update the input with the given identifier using the given event.\n   *\n   * @private\n   *\n   * @param {Event} event - The event being captured.\n   * @param {number} identifier - The identifier of the input to update.\n   */\n  updateInput(event, identifier) {\n    switch (PHASE[event.type]) {\n    case START:\n      this[symbols.inputs].set(\n        identifier,\n        new Input(event, identifier),\n      );\n      try {\n        this.element.setPointerCapture(identifier);\n      } catch (e) {\n        // NOP: Optional operation failed.\n      }\n      break;\n\n    // All of 'end', 'move', and 'cancel' perform updates, hence the\n    // following fall-throughs\n    case END:\n      try {\n        this.element.releasePointerCapture(identifier);\n      } catch (e) {\n        // NOP: Optional operation failed.\n      }\n    case CANCEL:\n    case MOVE:\n      if (this[symbols.inputs].has(identifier)) {\n        this[symbols.inputs].get(identifier).update(event);\n      }\n      break;\n\n    default:\n      console.warn(`Unrecognized event type: ${event.type}`);\n    }\n  }\n\n  /**\n   * Updates the inputs with new information based upon a new event being fired.\n   *\n   * @private\n   * @param {Event} event - The event being captured.\n   */\n  updateAllInputs(event) {\n    update_fns[event.constructor.name].call(this, event);\n    this.updateFields(event);\n  }\n\n  /**\n   * Updates the convenience fields.\n   *\n   * @private\n   * @param {Event} event - Event with which to update the convenience fields.\n   */\n  updateFields(event) {\n    this.inputs = Array.from(this[symbols.inputs].values());\n    this.active = this.getInputsNotInPhase('end');\n    this.activePoints = this.active.map(i => i.current.point);\n    this.centroid = Point2D.centroid(this.activePoints);\n    this.event = event;\n  }\n}\n\nmodule.exports = State;\n\n","'use strict';\n\nconst State = require('./State.js');\nconst {\n  CANCEL_EVENTS,\n  KEYBOARD_EVENTS,\n  MOUSE_EVENTS,\n  POINTER_EVENTS,\n  TOUCH_EVENTS,\n\n  STATE_KEY_STRINGS,\n\n  PHASE,\n\n  CANCEL,\n  END,\n  START,\n} = require('./constants.js');\nconst {\n  setDifference,\n  setFilter,\n} = require('./utils.js');\n\n/**\n * Allows the user to specify the control region which will listen for user\n * input events.\n *\n * @memberof westures-core\n *\n * @param {Element} element=window - The element which should listen to input\n * events.\n * @param {object} [options]\n * @param {boolean} [options.capture=false] - Whether the region uses the\n * capture phase of input events. If false, uses the bubbling phase.\n * @param {boolean} [options.preferPointer=true] - If false, the region listens\n * to mouse/touch events instead of pointer events.\n * @param {boolean} [options.preventDefault=true] - Whether the default\n * browser functionality should be disabled. This option should most likely be\n * ignored. Here there by dragons if set to false.\n * @param {string} [options.touchAction='none'] - Value to set the CSS\n * 'touch-action' property to on elements added to the region.\n */\nclass Region {\n  constructor(element = window, options = {}) {\n    options = { ...Region.DEFAULTS, ...options };\n\n    /**\n     * The list of relations between elements, their gestures, and the handlers.\n     *\n     * @type {Set.<westures-core.Gesture>}\n     */\n    this.gestures = new Set();\n\n    /**\n     * The list of active gestures for the current input session.\n     *\n     * @type {Set.<westures-core.Gesture>}\n     */\n    this.activeGestures = new Set();\n\n    /**\n     * The base list of potentially active gestures for the current input\n     * session.\n     *\n     * @type {Set.<westures-core.Gesture>}\n     */\n    this.potentialGestures = new Set();\n\n    /**\n     * The element being bound to.\n     *\n     * @type {Element}\n     */\n    this.element = element;\n\n    /**\n     * The user-supplied options for the Region.\n     *\n     * @type {object}\n     */\n    this.options = options;\n\n    /**\n     * The internal state object for a Region.  Keeps track of inputs.\n     *\n     * @type {westures-core.State}\n     */\n    this.state = new State(this.element);\n\n    // Begin operating immediately.\n    this.activate();\n  }\n\n  /**\n   * Activates the region by adding event listeners for all appropriate input\n   * events to the region's element.\n   *\n   * @private\n   */\n  activate() {\n    /*\n     * Listening to both mouse and touch comes with the difficulty that\n     * preventDefault() must be called to prevent both events from iterating\n     * through the system. However I have left it as an option to the end user,\n     * which defaults to calling preventDefault(), in case there's a use-case I\n     * haven't considered or am not aware of.\n     *\n     * It also may be a good idea to keep regions small in large pages.\n     *\n     * See:\n     *  https://www.html5rocks.com/en/mobile/touchandmouse/\n     *  https://developer.mozilla.org/en-US/docs/Web/API/Touch_events\n     *  https://developer.mozilla.org/en-US/docs/Web/API/Pointer_events\n     */\n    let eventNames = [];\n    if (this.options.preferPointer && window.PointerEvent) {\n      eventNames = POINTER_EVENTS;\n    } else {\n      eventNames = MOUSE_EVENTS.concat(TOUCH_EVENTS);\n    }\n\n    // Bind detected browser events to the region element.\n    const arbitrate = this.arbitrate.bind(this);\n    eventNames.forEach(eventName => {\n      this.element.addEventListener(eventName, arbitrate, {\n        capture: this.options.capture,\n        once:    false,\n        passive: false,\n      });\n    });\n\n    const cancel = this.cancel.bind(this);\n    CANCEL_EVENTS.forEach(eventName => {\n      window.addEventListener(eventName, cancel);\n    });\n\n    const handleKeyboardEvent = this.handleKeyboardEvent.bind(this);\n    KEYBOARD_EVENTS.forEach(eventName => {\n      window.addEventListener(eventName, handleKeyboardEvent);\n    });\n  }\n\n  /**\n   * Handles a cancel event. Resets the state and the active / potential gesture\n   * lists.\n   *\n   * @private\n   * @param {Event} event - The event emitted from the window object.\n   */\n  cancel(event) {\n    if (this.options.preventDefault) event.preventDefault();\n    this.state.inputs.forEach(input => {\n      input.update(event);\n    });\n    this.activeGestures.forEach(gesture => {\n      gesture.evaluateHook(CANCEL, this.state);\n    });\n    this.state = new State(this.element);\n    this.resetActiveGestures();\n  }\n\n  /**\n   * Handles a keyboard event, triggering a restart of any gestures that need\n   * it.\n   *\n   * @private\n   * @param {KeyboardEvent} event - The keyboard event.\n   */\n  handleKeyboardEvent(event) {\n    if (STATE_KEY_STRINGS.indexOf(event.key) >= 0) {\n      this.state.event = event;\n      const oldActiveGestures = this.activeGestures;\n      this.setActiveGestures();\n\n      setDifference(oldActiveGestures, this.activeGestures).forEach(gesture => {\n        gesture.evaluateHook(END, this.state);\n      });\n      setDifference(this.activeGestures, oldActiveGestures).forEach(gesture => {\n        gesture.evaluateHook(START, this.state);\n      });\n    }\n  }\n\n  /**\n   * Resets the active gestures.\n   *\n   * @private\n   */\n  resetActiveGestures() {\n    this.potentialGestures = new Set();\n    this.activeGestures = new Set();\n  }\n\n  /**\n   * Selects active gestures from the list of potentially active gestures.\n   *\n   * @private\n   */\n  setActiveGestures() {\n    this.activeGestures = setFilter(this.potentialGestures, gesture => {\n      return gesture.isEnabled(this.state);\n    });\n  }\n\n  /**\n   * Selects the potentially active gestures.\n   *\n   * @private\n   */\n  setPotentialGestures() {\n    const input = this.state.inputs[0];\n    this.potentialGestures = setFilter(this.gestures, gesture => {\n      return input.initialElements.has(gesture.element);\n    });\n  }\n\n  /**\n   * Selects the gestures that are active for the current input sequence.\n   *\n   * @private\n   * @param {Event} event - The event emitted from the window object.\n   * @param {boolean} isInitial - Whether this is an initial contact.\n   */\n  updateActiveGestures(event, isInitial) {\n    if (PHASE[event.type] === START) {\n      if (isInitial) {\n        this.setPotentialGestures();\n      }\n      this.setActiveGestures();\n    }\n  }\n\n  /**\n   * Evaluates whether the current input session has completed.\n   *\n   * @private\n   * @param {Event} event - The event emitted from the window object.\n   */\n  pruneActiveGestures(event) {\n    if (PHASE[event.type] === END) {\n      if (this.state.hasNoInputs()) {\n        this.resetActiveGestures();\n      } else {\n        this.setActiveGestures();\n      }\n    }\n  }\n\n  /**\n   * All input events flow through this function. It makes sure that the input\n   * state is maintained, determines which gestures to analyze based on the\n   * initial position of the inputs, calls the relevant gesture hooks, and\n   * dispatches gesture data.\n   *\n   * @private\n   * @param {Event} event - The event emitted from the window object.\n   */\n  arbitrate(event) {\n    const isInitial = this.state.hasNoInputs();\n    this.state.updateAllInputs(event);\n    this.updateActiveGestures(event, isInitial);\n\n    if (this.activeGestures.size > 0) {\n      if (this.options.preventDefault) event.preventDefault();\n\n      this.activeGestures.forEach(gesture => {\n        gesture.evaluateHook(PHASE[event.type], this.state);\n      });\n    }\n\n    this.state.clearEndedInputs();\n    this.pruneActiveGestures(event);\n  }\n\n  /**\n   * Adds the given gesture to the region.\n   *\n   * @param {westures-core.Gesture} gesture - Instantiated gesture to add.\n   */\n  addGesture(gesture) {\n    gesture.element.style.touchAction = this.options.touchAction;\n    this.gestures.add(gesture);\n  }\n\n  /**\n   * Removes the given gesture from the region.\n   *\n   * @param {westures-core.Gesture} gesture - Instantiated gesture to add.\n   */\n  removeGesture(gesture) {\n    this.gestures.delete(gesture);\n    this.potentialGestures.delete(gesture);\n    this.activeGestures.delete(gesture);\n  }\n\n  /**\n   * Retrieves Gestures by their associated element.\n   *\n   * @param {Element} element - The element for which to find gestures.\n   *\n   * @return {westures-core.Gesture[]} Gestures to which the element is bound.\n   */\n  getGesturesByElement(element) {\n    return setFilter(this.gestures, gesture => gesture.element === element);\n  }\n\n  /**\n   * Remove all gestures bound to the given element.\n   *\n   * @param {Element} element - The element to unbind.\n   */\n  removeGesturesByElement(element) {\n    this.getGesturesByElement(element).forEach(g => this.removeGesture(g));\n  }\n}\n\nRegion.DEFAULTS = {\n  capture:        false,\n  preferPointer:  true,\n  preventDefault: true,\n  touchAction:    'none',\n};\n\nmodule.exports = Region;\n","'use strict';\n\nconst cascade = Symbol('cascade');\nconst smooth = Symbol('smooth');\n\n/**\n * Determines whether to apply smoothing. Smoothing is on by default but turned\n * off if either:<br>\n *  1. The user explicitly requests that it be turned off.<br>\n *  2. The active pointer is not \"coarse\".<br>\n *\n * @see {@link\n * https://developer.mozilla.org/en-US/docs/Web/API/Window/matchMedia}\n *\n * @inner\n * @memberof westures-core.Smoothable\n *\n * @param {boolean} isRequested - Whether smoothing was requested by the user.\n *\n * @returns {boolean} Whether to apply smoothing.\n */\nfunction smoothingIsApplicable(isRequested) {\n  if (isRequested) {\n    try {\n      return window.matchMedia('(pointer: coarse)').matches;\n    } catch (e) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * A Smoothable datatype is one that is capable of smoothing out a series of\n * values as they come in, one at a time, providing a more consistent series. It\n * does this by creating some inertia in the values using a cascading average.\n * (For those who are interested in such things, this effectively means that it\n * provides a practical application of Zeno's Dichotomy).\n *\n * @example\n * const x = new Smoothable({ identity: 1 });\n * const a = x.next(1);   // 1.0\n * const b = x.next(1.2); // 1.1\n * const c = x.next(0.9); // 1.0\n * const d = x.next(0.6); // 0.8\n * const e = x.next(1.2); // 1.0\n * const f = x.next(1.6); // 1.3\n * x.restart();\n * const g = x.next(0);   // 0.5\n *\n * @memberof westures-core\n *\n * @param {Object} [options]\n * @param {boolean} [options.applySmoothing=true] Whether to apply smoothing to\n * the data.\n * @param {*} [options.identity=0] The identity value of this smoothable data.\n */\nclass Smoothable {\n  constructor(options = {}) {\n    const final_options = { ...Smoothable.DEFAULTS, ...options };\n\n    /**\n     * The function through which smoothed emits are passed.\n     *\n     * @method\n     * @param {*} data - The data to emit.\n     *\n     * @return {*} The smoothed out data.\n     */\n    this.next = null;\n    if (smoothingIsApplicable(final_options.applySmoothing)) {\n      this.next = this[smooth].bind(this);\n    } else {\n      this.next = data => data;\n    }\n\n    /**\n     * The \"identity\" value of the data that will be smoothed.\n     *\n     * @type {*}\n     * @default 0\n     */\n    this.identity = final_options.identity;\n\n    /**\n     * The cascading average of outgoing values.\n     *\n     * @memberof westures-core.Smoothable\n     * @alias [@@cascade]\n     * @type {object}\n     */\n    this[cascade] = this.identity;\n  }\n\n  /**\n   * Restart the Smoothable gesture.\n   */\n  restart() {\n    this[cascade] = this.identity;\n  }\n\n  /**\n   * Smooth out the outgoing data.\n   *\n   * @memberof westures-core.Smoothable\n   * @alias [@@smooth]\n   * @param {object} data - The next batch of data to emit.\n   *\n   * @return {?object}\n   */\n  [smooth](data) {\n    const average = this.average(this[cascade], data);\n    this[cascade] = average;\n    return average;\n  }\n\n  /**\n   * Average out two values, as part of the smoothing algorithm. Override this\n   * method if the data being smoothed is not a Number.\n   *\n   * @param {number} a\n   * @param {number} b\n   *\n   * @return {number} The average of 'a' and 'b'\n   */\n  average(a, b) {\n    return (a + b) / 2;\n  }\n}\n\nSmoothable.DEFAULTS = {\n  applySmoothing: true,\n  identity:       0,\n};\n\nmodule.exports = Smoothable;\n\n","/**\n * The global API interface for westures-core. Exposes all classes, constants,\n * and routines used by the package. Use responsibly.\n *\n * @namespace westures-core\n */\n\n'use strict';\n\nconst Gesture = require('./src/Gesture.js');\nconst Input = require('./src/Input.js');\nconst Point2D = require('./src/Point2D.js');\nconst PointerData = require('./src/PointerData.js');\nconst Region = require('./src/Region.js');\nconst Smoothable = require('./src/Smoothable.js');\nconst State = require('./src/State.js');\nconst constants = require('./src/constants.js');\nconst utils = require('./src/utils.js');\n\nmodule.exports = {\n  Gesture,\n  Input,\n  Point2D,\n  PointerData,\n  Region,\n  Smoothable,\n  State,\n  ...constants,\n  ...utils,\n};\n\n","/*\n * Contains the Pan class.\n */\n\n'use strict';\n\nconst { Gesture, Point2D, Smoothable } = require('westures-core');\n\n/**\n * Data returned when a Pan is recognized.\n *\n * @typedef {Object} PanData\n * @mixes ReturnTypes.BaseData\n *\n * @property {westures-core.Point2D} translation - The change vector from the\n * last emit.\n *\n * @memberof ReturnTypes\n */\n\n/**\n * A Pan is defined as a normal movement in any direction.\n *\n * @extends westures-core.Gesture\n * @see {ReturnTypes.PanData}\n * @see {westures-core.Smoothable}\n * @memberof westures\n *\n * @param {Element} element - The element with which to associate the gesture.\n * @param {Function} handler - The function handler to execute when a gesture\n * is recognized on the associated element.\n * @param {object} [options] - Gesture customization options.\n * @param {westures-core.STATE_KEYS[]} [options.enableKeys=[]] - List of keys\n * which will enable the gesture. The gesture will not be recognized unless one\n * of these keys is pressed while the interaction occurs. If not specified or an\n * empty list, the gesture is treated as though the enable key is always down.\n * @param {westures-core.STATE_KEYS[]} [options.disableKeys=[]] - List of keys\n * which will disable the gesture. The gesture will not be recognized if one of\n * these keys is pressed while the interaction occurs. If not specified or an\n * empty list, the gesture is treated as though the disable key is never down.\n * @param {number} [options.minInputs=1] - The minimum number of pointers that\n * must be active for the gesture to be recognized. Uses >=.\n * @param {number} [options.maxInputs=Number.MAX_VALUE] - The maximum number of\n * pointers that may be active for the gesture to be recognized. Uses <=.\n * @param {boolean} [options.applySmoothing=true] - Whether to apply inertial\n * smoothing for systems with coarse pointers.\n */\nclass Pan extends Gesture {\n  constructor(element, handler, options = {}) {\n    super('pan', element, handler, options);\n\n    /**\n     * The previous point location.\n     *\n     * @type {westures-core.Point2D}\n     */\n    this.previous = null;\n\n    /*\n     * The outgoing data, with optional inertial smoothing.\n     *\n     * @override\n     * @type {westures-core.Smoothable<westures-core.Point2D>}\n     */\n    this.outgoing = new Smoothable({ ...options, identity: new Point2D() });\n    this.outgoing.average = (a, b) => Point2D.centroid([a, b]);\n  }\n\n  /**\n   * Resets the gesture's progress by saving the current centroid of the active\n   * inputs. To be called whenever the number of inputs changes.\n   *\n   * @param {State} state\n   */\n  restart(state) {\n    this.previous = state.centroid;\n    this.outgoing.restart();\n  }\n\n  start(state) {\n    this.restart(state);\n  }\n\n  move(state) {\n    const translation = state.centroid.minus(this.previous);\n    this.previous = state.centroid;\n    return { translation: this.outgoing.next(translation) };\n  }\n\n  end(state) {\n    this.restart(state);\n  }\n\n  cancel(state) {\n    this.restart(state);\n  }\n}\n\nmodule.exports = Pan;\n\n","/*\n * Contains the abstract Pinch class.\n */\n\n'use strict';\n\nconst { Gesture, Smoothable } = require('westures-core');\n\n/**\n * Data returned when a Pinch is recognized.\n *\n * @typedef {Object} PinchData\n * @mixes ReturnTypes.BaseData\n *\n * @property {number} distance - The average distance from an active input to\n *    the centroid.\n * @property {number} scale - The proportional change in distance since last\n * emit.\n *\n * @memberof ReturnTypes\n */\n\n/**\n * A Pinch is defined as two or more inputs moving either together or apart.\n *\n * @extends westures-core.Gesture\n * @see {ReturnTypes.PinchData}\n * @memberof westures\n *\n * @param {Element} element - The element to which to associate the gesture.\n * @param {Function} handler - The function handler to execute when a gesture\n * is recognized on the associated element.\n * @param {object} [options] - Gesture customization options.\n * @param {westures-core.STATE_KEYS[]} [options.enableKeys=[]] - List of keys\n * which will enable the gesture. The gesture will not be recognized unless one\n * of these keys is pressed while the interaction occurs. If not specified or an\n * empty list, the gesture is treated as though the enable key is always down.\n * @param {westures-core.STATE_KEYS[]} [options.disableKeys=[]] - List of keys\n * which will disable the gesture. The gesture will not be recognized if one of\n * these keys is pressed while the interaction occurs. If not specified or an\n * empty list, the gesture is treated as though the disable key is never down.\n * @param {number} [options.minInputs=2] - The minimum number of pointers that\n * must be active for the gesture to be recognized. Uses >=.\n * @param {number} [options.maxInputs=Number.MAX_VALUE] - The maximum number of\n * pointers that may be active for the gesture to be recognized. Uses <=.\n * @param {boolean} [options.applySmoothing=true] - Whether to apply inertial\n * smoothing for systems with coarse pointers.\n */\nclass Pinch extends Gesture {\n  constructor(element, handler, options = {}) {\n    options = { ...Pinch.DEFAULTS, ...options };\n    super('pinch', element, handler, options);\n\n    /**\n     * The previous distance.\n     *\n     * @type {number}\n     */\n    this.previous = 0;\n\n    /*\n     * The outgoing data, with optional inertial smoothing.\n     *\n     * @override\n     * @type {westures-core.Smoothable<number>}\n     */\n    this.outgoing = new Smoothable({ ...options, identity: 1 });\n  }\n\n  /**\n   * Initializes the gesture progress.\n   *\n   * @param {State} state - current input state.\n   */\n  restart(state) {\n    this.previous = state.centroid.averageDistanceTo(state.activePoints);\n    this.outgoing.restart();\n  }\n\n  start(state) {\n    this.restart(state);\n  }\n\n  move(state) {\n    const distance = state.centroid.averageDistanceTo(state.activePoints);\n    const scale = distance / this.previous;\n    this.previous = distance;\n    return { distance, scale: this.outgoing.next(scale) };\n  }\n\n  end(state) {\n    this.restart(state);\n  }\n\n  cancel(state) {\n    this.restart(state);\n  }\n}\n\nPinch.DEFAULTS = Object.freeze({\n  minInputs: 2,\n});\n\nmodule.exports = Pinch;\n\n","/*\n * Contains the Press class.\n */\n\n'use strict';\n\nconst { Gesture, Point2D, MOVE } = require('westures-core');\n\n/**\n * Data returned when a Press is recognized.\n *\n * @typedef {Object} PressData\n *\n * @property {westures-core.Point2D} centroid - The current centroid of the\n * input points.\n * @property {westures-core.Point2D} initial - The initial centroid of the input\n * points.\n * @property {number} distance - The total movement since initial contact.\n *\n * @memberof ReturnTypes\n */\n\n/**\n * A Press is defined as one or more input points being held down without\n * moving. Press gestures may be stacked by pressing with additional pointers\n * beyond the minimum, so long as none of the points move or are lifted, a Press\n * will be recognized for each additional pointer.\n *\n * @extends westures-core.Gesture\n * @see {ReturnTypes.PressData}\n * @memberof westures\n *\n * @param {Element} element - The element to which to associate the gesture.\n * @param {Function} handler - The function handler to execute when a gesture\n * is recognized on the associated element.\n * @param {object} [options] - Gesture customization options.\n * @param {westures-core.STATE_KEYS[]} [options.enableKeys=[]] - List of keys\n * which will enable the gesture. The gesture will not be recognized unless one\n * of these keys is pressed while the interaction occurs. If not specified or an\n * empty list, the gesture is treated as though the enable key is always down.\n * @param {westures-core.STATE_KEYS[]} [options.disableKeys=[]] - List of keys\n * which will disable the gesture. The gesture will not be recognized if one of\n * these keys is pressed while the interaction occurs. If not specified or an\n * empty list, the gesture is treated as though the disable key is never down.\n * @param {number} [options.minInputs=1] - The minimum number of pointers that\n * must be active for the gesture to be recognized. Uses >=.\n * @param {number} [options.maxInputs=Number.MAX_VALUE] - The maximum number of\n * pointers that may be active for the gesture to be recognized. Uses <=.\n * @param {number} [options.delay=1000] - The delay before emitting, during\n * which time the number of inputs must not go below minInputs.\n * @param {number} [options.tolerance=10] - The tolerance in pixels a user can\n * move and still allow the gesture to emit.\n */\nclass Press extends Gesture {\n  constructor(element, handler, options = {}) {\n    options = { ...Press.DEFAULTS, ...options };\n    super('press', element, handler, options);\n\n    /**\n     * The delay before emitting a press event, during which time the number of\n     * inputs must not change.\n     *\n     * @type {number}\n     */\n    this.delay = options.delay;\n\n    /**\n     * A move tolerance in pixels allows some slop between a user's start to end\n     * events. This allows the Press gesture to be triggered more easily.\n     *\n     * @type {number}\n     */\n    this.tolerance = options.tolerance;\n  }\n\n  start(state) {\n    const initial = state.centroid;\n    const identifiers = new Set(state.active.map(i => i.identifier));\n    setTimeout(() => {\n      const inputs = state.active.filter(i => identifiers.has(i.identifier));\n      const centroid = Point2D.centroid(inputs.map(i => i.current.point));\n\n      // Due to the timeout, possible that centroid is null...\n      if (centroid != null) {\n        const distance = initial.distanceTo(centroid);\n        if (distance <= this.tolerance && inputs.length === identifiers.size) {\n          this.recognize(MOVE, state, { centroid, distance, initial });\n        }\n      }\n    }, this.delay);\n  }\n}\n\nPress.DEFAULTS = Object.freeze({\n  delay:     1000,\n  tolerance: 10,\n});\n\nmodule.exports = Press;\n\n","/*\n * Contains the abstract Pull class.\n */\n\n'use strict';\n\nconst { Smoothable } = require('westures-core');\nconst Pivotable = require('./Pivotable.js');\n\n/**\n * Data returned when a Pull is recognized.\n *\n * @typedef {Object} PullData\n * @mixes ReturnTypes.BaseData\n *\n * @property {number} distance - The average distance from an active input to\n * the centroid.\n * @property {number} scale - The proportional change in distance since last\n * emit.\n * @property {westures-core.Point2D} pivot - The pivot point.\n *\n * @memberof ReturnTypes\n */\n\n/**\n * A Pull is defined as a single input moving away from or towards a pivot\n * point.\n *\n * @extends westures-core.Gesture\n * @see {ReturnTypes.PullData}\n * @memberof westures\n *\n * @param {Element} element - The element to which to associate the gesture.\n * @param {Function} handler - The function handler to execute when a gesture\n * is recognized on the associated element.\n * @param {object} [options] - Gesture customization options.\n * @param {westures-core.STATE_KEYS[]} [options.enableKeys=[]] - List of keys\n * which will enable the gesture. The gesture will not be recognized unless one\n * of these keys is pressed while the interaction occurs. If not specified or an\n * empty list, the gesture is treated as though the enable key is always down.\n * @param {westures-core.STATE_KEYS[]} [options.disableKeys=[]] - List of keys\n * which will disable the gesture. The gesture will not be recognized if one of\n * these keys is pressed while the interaction occurs. If not specified or an\n * empty list, the gesture is treated as though the disable key is never down.\n * @param {number} [options.minInputs=1] - The minimum number of pointers that\n * must be active for the gesture to be recognized. Uses >=.\n * @param {number} [options.maxInputs=Number.MAX_VALUE] - The maximum number of\n * pointers that may be active for the gesture to be recognized. Uses <=.\n * @param {boolean} [options.applySmoothing=true] - Whether to apply inertial\n * smoothing for systems with coarse pointers.\n * @param {number} [options.deadzoneRadius=15] - The radius in pixels around the\n * start point in which to do nothing.\n * @param {Element} [options.dynamicPivot=false] - Normally the center point of\n * the gesture's element is used as the pivot. If this option is set, the\n * initial contact point with the element is used as the pivot instead.\n */\nclass Pull extends Pivotable {\n  constructor(element, handler, options = {}) {\n    super('pull', element, handler, options);\n\n    /*\n     * The outgoing data, with optional inertial smoothing.\n     *\n     * @override\n     * @type {westures-core.Smoothable<number>}\n     */\n    this.outgoing = new Smoothable({ ...options, identity: 1 });\n  }\n\n  updatePrevious(state) {\n    this.previous = this.pivot.distanceTo(state.centroid);\n  }\n\n  move(state) {\n    const pivot = this.pivot;\n    const distance = pivot.distanceTo(state.centroid);\n    const scale = distance / this.previous;\n\n    let rv = null;\n    if (distance > this.deadzoneRadius && this.previous > this.deadzoneRadius) {\n      rv = { distance, scale: this.outgoing.next(scale), pivot };\n    }\n\n    /*\n     * Updating the previous distance regardless of emit prevents sudden changes\n     * when the user exits the deadzone circle.\n     */\n    this.previous = distance;\n\n    return rv;\n  }\n}\n\nmodule.exports = Pull;\n\n","/*\n * Contains the Rotate class.\n */\n\n'use strict';\n\nconst { Gesture, Point2D, Smoothable } = require('westures-core');\n\n/**\n * Data returned when a Pivotable is recognized.\n *\n * @typedef {Object} SwivelData\n * @mixes ReturnTypes.BaseData\n *\n * @property {number} rotation - In radians, the change in angle since last\n * emit.\n * @property {westures-core.Point2D} pivot - The pivot point.\n *\n * @memberof ReturnTypes\n */\n\n/**\n * Determine the center point of the given element's bounding client rectangle.\n *\n * @inner\n * @memberof westures.Pivotable\n *\n * @param {Element} element - The DOM element to analyze.\n * @return {westures-core.Point2D} - The center of the element's bounding client\n * rectangle.\n */\nfunction getClientCenter(element) {\n  const rect = element.getBoundingClientRect();\n  return new Point2D(\n    rect.left + (rect.width / 2),\n    rect.top + (rect.height / 2),\n  );\n}\n\n/**\n * A Pivotable is a single input rotating around a fixed point. The fixed point\n * is determined by the input's location at its 'start' phase.\n *\n * @extends westures.Gesture\n * @see {ReturnTypes.SwivelData}\n * @memberof westures\n *\n * @param {Element} element - The element to which to associate the gesture.\n * @param {Function} handler - The function handler to execute when a gesture\n * is recognized on the associated element.\n * @param {object} [options] - Gesture customization options.\n * @param {westures-core.STATE_KEYS[]} [options.enableKeys=[]] - List of keys\n * which will enable the gesture. The gesture will not be recognized unless one\n * of these keys is pressed while the interaction occurs. If not specified or an\n * empty list, the gesture is treated as though the enable key is always down.\n * @param {westures-core.STATE_KEYS[]} [options.disableKeys=[]] - List of keys\n * which will disable the gesture. The gesture will not be recognized if one of\n * these keys is pressed while the interaction occurs. If not specified or an\n * empty list, the gesture is treated as though the disable key is never down.\n * @param {number} [options.minInputs=1] - The minimum number of pointers that\n * must be active for the gesture to be recognized. Uses >=.\n * @param {number} [options.maxInputs=Number.MAX_VALUE] - The maximum number of\n * pointers that may be active for the gesture to be recognized. Uses <=.\n * @param {boolean} [options.applySmoothing=true] - Whether to apply inertial\n * smoothing for systems with coarse pointers.\n * @param {number} [options.deadzoneRadius=15] - The radius in pixels around the\n * start point in which to do nothing.\n * @param {Element} [options.dynamicPivot=false] - Normally the center point of\n * the gesture's element is used as the pivot. If this option is set, the\n * initial contact point with the element is used as the pivot instead.\n */\nclass Pivotable extends Gesture {\n  constructor(type = 'pivotable', element, handler, options = {}) {\n    super(type, element, handler, options);\n    options = { ...Pivotable.DEFAULTS, ...options };\n\n    /**\n     * The radius around the start point in which to do nothing.\n     *\n     * @type {number}\n     */\n    this.deadzoneRadius = options.deadzoneRadius;\n\n    /**\n     * Normally the center point of the gesture's element is used as the pivot.\n     * If this option is set, the initial contact point with the element is used\n     * as the pivot instead.\n     *\n     * @type {boolean}\n     */\n    this.dynamicPivot = options.dynamicPivot;\n\n    /**\n     * The pivot point of the pivotable.\n     *\n     * @type {westures-core.Point2D}\n     */\n    this.pivot = null;\n\n    /**\n     * The previous data.\n     *\n     * @type {number}\n     */\n    this.previous = 0;\n\n    /**\n     * The outgoing data.\n     *\n     * @type {westures-core.Smoothable}\n     */\n    this.outgoing = new Smoothable(options);\n  }\n\n  /**\n   * Updates the previous data. It will be called during the 'start' and 'end'\n   * phases, and should also be called during the 'move' phase implemented by\n   * the subclass.\n   *\n   * @abstract\n   * @param {State} state - the current input state.\n   */\n  updatePrevious() {\n    throw 'Gestures which extend Pivotable must implement updatePrevious()';\n  }\n\n  /**\n   * Restart the given progress object using the given input object.\n   *\n   * @param {State} state - current input state.\n   */\n  restart(state) {\n    if (this.dynamicPivot) {\n      this.pivot = state.centroid;\n      this.previous = 0;\n    } else {\n      this.pivot = getClientCenter(this.element);\n      this.updatePrevious(state);\n    }\n    this.outgoing.restart();\n  }\n\n  start(state) {\n    this.restart(state);\n  }\n\n  end(state) {\n    if (state.active.length > 0) {\n      this.restart(state);\n    } else {\n      this.outgoing.restart();\n    }\n  }\n\n  cancel() {\n    this.outgoing.restart();\n  }\n}\n\nPivotable.DEFAULTS = Object.freeze({\n  deadzoneRadius: 15,\n  dynamicPivot:   false,\n});\n\nPivotable.getClientCenter = getClientCenter;\n\nmodule.exports = Pivotable;\n\n","/*\n * Contains the Rotate class.\n */\n\n'use strict';\n\nconst { angularDifference, Gesture, Smoothable } = require('westures-core');\n\n/**\n * Data returned when a Rotate is recognized.\n *\n * @typedef {Object} RotateData\n * @mixes ReturnTypes.BaseData\n *\n * @property {number} rotation - In radians, the change in angle since last\n * emit.\n *\n * @memberof ReturnTypes\n */\n\n/**\n * A Rotate is defined as two inputs moving with a changing angle between them.\n *\n * @extends westures-core.Gesture\n * @see {ReturnTypes.RotateData}\n * @memberof westures\n *\n * @param {Element} element - The element to which to associate the gesture.\n * @param {Function} handler - The function handler to execute when a gesture\n * is recognized on the associated element.\n * @param {object} [options] - Gesture customization options.\n * @param {westures-core.STATE_KEYS[]} [options.enableKeys=[]] - List of keys\n * which will enable the gesture. The gesture will not be recognized unless one\n * of these keys is pressed while the interaction occurs. If not specified or an\n * empty list, the gesture is treated as though the enable key is always down.\n * @param {westures-core.STATE_KEYS[]} [options.disableKeys=[]] - List of keys\n * which will disable the gesture. The gesture will not be recognized if one of\n * these keys is pressed while the interaction occurs. If not specified or an\n * empty list, the gesture is treated as though the disable key is never down.\n * @param {number} [options.minInputs=2] - The minimum number of pointers that\n * must be active for the gesture to be recognized. Uses >=.\n * @param {number} [options.maxInputs=Number.MAX_VALUE] - The maximum number of\n * pointers that may be active for the gesture to be recognized. Uses <=.\n * @param {boolean} [options.applySmoothing=true] - Whether to apply inertial\n * smoothing for systems with coarse pointers.\n */\nclass Rotate extends Gesture {\n  constructor(element, handler, options = {}) {\n    options = { ...Rotate.DEFAULTS, ...options };\n    super('rotate', element, handler, options);\n\n    /**\n     * Track the previous angles for each input.\n     *\n     * @type {number[]}\n     */\n    this.previousAngles = [];\n\n    /*\n     * The outgoing data, with optional inertial smoothing.\n     *\n     * @override\n     * @type {westures-core.Smoothable<number>}\n     */\n    this.outgoing = new Smoothable(options);\n  }\n\n  /**\n   * Determine the angle from the state's centroid to each of the active inputs.\n   *\n   * @param {State} state - current input state.\n   * @returns {number[]}\n   */\n  anglesFromCentroid(state) {\n    return state.active.map((i) => state.centroid.angleTo(i.current.point));\n  }\n\n  /**\n   * Calculate the per-input angle progress.\n   *\n   * @param {State} state - current input state.\n   * @returns {number} The average change in angle.\n   */\n  getRotation(state) {\n    const stagedAngles = this.anglesFromCentroid(state);\n    const angle = stagedAngles.reduce((total, current, index) => {\n      return total + angularDifference(current, this.previousAngles[index]);\n    }, 0);\n    this.previousAngles = stagedAngles;\n    return angle / state.active.length;\n  }\n\n  /**\n   * Restart the gesture for a new number of inputs.\n   *\n   * @param {State} state - current input state.\n   */\n  restart(state) {\n    this.previousAngles = this.anglesFromCentroid(state);\n    this.outgoing.restart();\n  }\n\n  start(state) {\n    this.restart(state);\n  }\n\n  move(state) {\n    const rotation = this.getRotation(state);\n    return rotation ? { rotation: this.outgoing.next(rotation) } : null;\n  }\n\n  end(state) {\n    this.restart(state);\n  }\n\n  cancel() {\n    this.outgoing.restart();\n  }\n}\n\nRotate.DEFAULTS = Object.freeze({\n  minInputs: 2,\n});\n\nmodule.exports = Rotate;\n\n","/*\n * Contains the Swipe class.\n */\n\n'use strict';\n\nconst { Gesture } = require('westures-core');\n\nconst PROGRESS_STACK_SIZE = 7;\nconst MS_THRESHOLD = 300;\n\n/**\n * Data returned when a Swipe is recognized.\n *\n * @typedef {Object} SwipeData\n * @mixes ReturnTypes.BaseData\n *\n * @property {number} velocity - The velocity of the swipe.\n * @property {number} direction - In radians, the direction of the swipe.\n * @property {westures-core.Point2D} point - The point at which the swipe ended.\n * @property {number} time - The epoch time, in ms, when the swipe ended.\n *\n * @memberof ReturnTypes\n */\n\n/**\n * Calculates the angle of movement along a series of moves.\n *\n * @inner\n * @memberof westures.Swipe\n * @see {@link https://en.wikipedia.org/wiki/Mean_of_circular_quantities}\n *\n * @param {{time: number, point: westures-core.Point2D}} moves - The moves list\n * to process.\n * @param {number} vlim - The number of moves to process.\n *\n * @return {number} The angle of the movement.\n */\nfunction calc_angle(moves, vlim) {\n  const point = moves[vlim].point;\n  let sin = 0;\n  let cos = 0;\n  for (let i = 0; i < vlim; ++i) {\n    const angle = moves[i].point.angleTo(point);\n    sin += Math.sin(angle);\n    cos += Math.cos(angle);\n  }\n  sin /= vlim;\n  cos /= vlim;\n  return Math.atan2(sin, cos);\n}\n\n/**\n * Local helper function for calculating the velocity between two timestamped\n * points.\n *\n * @inner\n * @memberof westures.Swipe\n *\n * @param {object} start\n * @param {westures-core.Point2D} start.point\n * @param {number} start.time\n * @param {object} end\n * @param {westures-core.Point2D} end.point\n * @param {number} end.time\n *\n * @return {number} velocity from start to end point.\n */\nfunction velocity(start, end) {\n  const distance = end.point.distanceTo(start.point);\n  const time = end.time - start.time + 1;\n  return distance / time;\n}\n\n/**\n * Calculates the veloctiy of movement through a series of moves.\n *\n * @inner\n * @memberof westures.Swipe\n *\n * @param {{time: number, point: westures-core.Point2D}} moves - The moves list\n * to process.\n * @param {number} vlim - The number of moves to process.\n *\n * @return {number} The velocity of the moves.\n */\nfunction calc_velocity(moves, vlim) {\n  let max = 0;\n  for (let i = 0; i < vlim; ++i) {\n    const current = velocity(moves[i], moves[i + 1]);\n    if (current > max) max = current;\n  }\n  return max;\n}\n\n/**\n * A swipe is defined as input(s) moving in the same direction in an relatively\n * increasing velocity and leaving the screen at some point before it drops\n * below it's escape velocity.\n *\n * @extends westures-core.Gesture\n * @see {ReturnTypes.SwipeData}\n * @memberof westures\n *\n * @param {Element} element - The element to which to associate the gesture.\n * @param {Function} handler - The function handler to execute when a gesture\n * is recognized on the associated element.\n * @param {object} [options] - Gesture customization options.\n * @param {westures-core.STATE_KEYS[]} [options.enableKeys=[]] - List of keys\n * which will enable the gesture. The gesture will not be recognized unless one\n * of these keys is pressed while the interaction occurs. If not specified or an\n * empty list, the gesture is treated as though the enable key is always down.\n * @param {westures-core.STATE_KEYS[]} [options.disableKeys=[]] - List of keys\n * which will disable the gesture. The gesture will not be recognized if one of\n * these keys is pressed while the interaction occurs. If not specified or an\n * empty list, the gesture is treated as though the disable key is never down.\n * @param {number} [options.minInputs=1] - The minimum number of pointers that\n * must be active for the gesture to be recognized. Uses >=.\n * @param {number} [options.maxInputs=Number.MAX_VALUE] - The maximum number of\n * pointers that may be active for the gesture to be recognized. Uses <=.\n */\nclass Swipe extends Gesture {\n  constructor(element, handler, options = {}) {\n    super('swipe', element, handler, options);\n\n    /**\n     * Moves list.\n     *\n     * @type {object[]}\n     */\n    this.moves = [];\n\n    /**\n     * Data to emit when all points have ended.\n     *\n     * @type {ReturnTypes.SwipeData}\n     */\n    this.saved = null;\n  }\n\n  /**\n   * Restart the swipe state for a new numper of inputs.\n   */\n  restart() {\n    this.moves = [];\n    this.saved = null;\n  }\n\n  start() {\n    this.restart();\n  }\n\n  move(state) {\n    this.moves.push({\n      time:  Date.now(),\n      point: state.centroid,\n    });\n\n    if (this.moves.length > PROGRESS_STACK_SIZE) {\n      this.moves.splice(0, this.moves.length - PROGRESS_STACK_SIZE);\n    }\n  }\n\n  end(state) {\n    const result = this.getResult();\n    this.moves = [];\n\n    if (state.active.length > 0) {\n      this.saved = result;\n      return null;\n    }\n\n    this.saved = null;\n    return this.validate(result);\n  }\n\n  cancel() {\n    this.restart();\n  }\n\n  /**\n   * Get the swipe result.\n   *\n   * @returns {?ReturnTypes.SwipeData}\n   */\n  getResult() {\n    if (this.moves.length < PROGRESS_STACK_SIZE) {\n      return this.saved;\n    }\n    const vlim = PROGRESS_STACK_SIZE - 1;\n    const { point, time } = this.moves[vlim];\n    const velocity = calc_velocity(this.moves, vlim);\n    const direction = calc_angle(this.moves, vlim);\n    const centroid = point;\n    return { point, velocity, direction, time, centroid };\n  }\n\n  /**\n   * Validates that an emit should occur with the given data.\n   *\n   * @param {?ReturnTypes.SwipeData} data\n   * @returns {?ReturnTypes.SwipeData}\n   */\n  validate(data) {\n    if (data == null) return null;\n    return (Date.now() - data.time > MS_THRESHOLD) ? null : data;\n  }\n}\n\nmodule.exports = Swipe;\n\n","/*\n * Contains the Rotate class.\n */\n\n'use strict';\n\nconst { angularDifference, Smoothable } = require('westures-core');\nconst Pivotable = require('./Pivotable.js');\n\n/**\n * Data returned when a Swivel is recognized.\n *\n * @typedef {Object} SwivelData\n * @mixes ReturnTypes.BaseData\n *\n * @property {number} rotation - In radians, the change in angle since last\n * emit.\n * @property {westures-core.Point2D} pivot - The pivot point.\n *\n * @memberof ReturnTypes\n */\n\n/**\n * A Swivel is a single input rotating around a fixed point. The fixed point is\n * determined by the input's location at its 'start' phase.\n *\n * @extends westures-core.Gesture\n * @see {ReturnTypes.SwivelData}\n * @memberof westures\n *\n * @param {Element} element - The element to which to associate the gesture.\n * @param {Function} handler - The function handler to execute when a gesture\n * is recognized on the associated element.\n * @param {object} [options] - Gesture customization options.\n * @param {westures-core.STATE_KEYS[]} [options.enableKeys=[]] - List of keys\n * which will enable the gesture. The gesture will not be recognized unless one\n * of these keys is pressed while the interaction occurs. If not specified or an\n * empty list, the gesture is treated as though the enable key is always down.\n * @param {westures-core.STATE_KEYS[]} [options.disableKeys=[]] - List of keys\n * which will disable the gesture. The gesture will not be recognized if one of\n * these keys is pressed while the interaction occurs. If not specified or an\n * empty list, the gesture is treated as though the disable key is never down.\n * @param {number} [options.minInputs=1] - The minimum number of pointers that\n * must be active for the gesture to be recognized. Uses >=.\n * @param {number} [options.maxInputs=Number.MAX_VALUE] - The maximum number of\n * pointers that may be active for the gesture to be recognized. Uses <=.\n * @param {boolean} [options.applySmoothing=true] - Whether to apply inertial\n * smoothing for systems with coarse pointers.\n * @param {number} [options.deadzoneRadius=15] - The radius in pixels around the\n * start point in which to do nothing.\n * @param {Element} [options.dynamicPivot=false] - Normally the center point of\n * the gesture's element is used as the pivot. If this option is set, the\n * initial contact point with the element is used as the pivot instead.\n */\nclass Swivel extends Pivotable {\n  constructor(element, handler, options = {}) {\n    super('swivel', element, handler, options);\n\n    /*\n     * The outgoing data, with optional inertial smoothing.\n     *\n     * @override\n     * @type {westures-core.Smoothable<number>}\n     */\n    this.outgoing = new Smoothable(options);\n  }\n\n  updatePrevious(state) {\n    this.previous = this.pivot.angleTo(state.centroid);\n  }\n\n  move(state) {\n    const pivot = this.pivot;\n    const angle = pivot.angleTo(state.centroid);\n    const rotation = angularDifference(angle, this.previous);\n\n    let rv = null;\n    if (pivot.distanceTo(state.centroid) > this.deadzoneRadius) {\n      rv = { rotation: this.outgoing.next(rotation), pivot };\n    }\n\n    /*\n     * Updating the previous angle regardless of emit prevents sudden flips when\n     * the user exits the deadzone circle.\n     */\n    this.previous = angle;\n\n    return rv;\n  }\n}\n\nmodule.exports = Swivel;\n\n","/*\n * Contains the Tap class.\n */\n\n'use strict';\n\nconst { Gesture, Point2D } = require('westures-core');\n\n/**\n * Data returned when a Tap is recognized.\n *\n * @typedef {Object} TapData\n * @mixes ReturnTypes.BaseData\n *\n * @property {number} x - x coordinate of tap point.\n * @property {number} y - y coordinate of tap point.\n *\n * @memberof ReturnTypes\n */\n\n/**\n * A Tap is defined as a touchstart to touchend event in quick succession.\n *\n * @extends westures-core.Gesture\n * @see {ReturnTypes.TapData}\n * @memberof westures\n *\n * @param {Element} element - The element to which to associate the gesture.\n * @param {Function} handler - The function handler to execute when a gesture\n * is recognized on the associated element.\n * @param {object} [options] - Gesture customization options.\n * @param {westures-core.STATE_KEYS[]} [options.enableKeys=[]] - List of keys\n * which will enable the gesture. The gesture will not be recognized unless one\n * of these keys is pressed while the interaction occurs. If not specified or an\n * empty list, the gesture is treated as though the enable key is always down.\n * @param {westures-core.STATE_KEYS[]} [options.disableKeys=[]] - List of keys\n * which will disable the gesture. The gesture will not be recognized if one of\n * these keys is pressed while the interaction occurs. If not specified or an\n * empty list, the gesture is treated as though the disable key is never down.\n * @param {number} [options.minInputs=1] - The minimum number of pointers that\n * must be active for the gesture to be recognized. Uses >=.\n * @param {number} [options.maxInputs=Number.MAX_VALUE] - The maximum number of\n * pointers that may be active for the gesture to be recognized. Uses <=.\n * @param {number} [options.minDelay=0] - The minimum delay between a touchstart\n * and touchend can be configured in milliseconds.\n * @param {number} [options.maxDelay=300] - The maximum delay between a\n * touchstart and touchend can be configured in milliseconds.\n * @param {number} [options.numTaps=1] - Number of taps to require.\n * @param {number} [options.tolerance=10] - The tolerance in pixels a user can\n * move.\n */\nclass Tap extends Gesture {\n  constructor(element, handler, options = {}) {\n    options = { ...Tap.DEFAULTS, ...options };\n    super('tap', element, handler, options);\n\n    /**\n     * The minimum amount between a touchstart and a touchend can be configured\n     * in milliseconds. The minimum delay starts to count down when the expected\n     * number of inputs are on the screen, and ends when ALL inputs are off the\n     * screen.\n     *\n     * @type {number}\n     */\n    this.minDelay = options.minDelay;\n\n    /**\n     * The maximum delay between a touchstart and touchend can be configured in\n     * milliseconds. The maximum delay starts to count down when the expected\n     * number of inputs are on the screen, and ends when ALL inputs are off the\n     * screen.\n     *\n     * @type {number}\n     */\n    this.maxDelay = options.maxDelay;\n\n    /**\n     * The number of inputs to trigger a Tap can be variable, and the maximum\n     * number being a factor of the browser.\n     *\n     * @type {number}\n     */\n    this.numTaps = options.numTaps;\n\n    /**\n     * A move tolerance in pixels allows some slop between a user's start to end\n     * events. This allows the Tap gesture to be triggered more easily.\n     *\n     * @type {number}\n     */\n    this.tolerance = options.tolerance;\n\n    /**\n     * An array of inputs that have ended recently.\n     *\n     * @type {Input[]}\n     */\n    this.taps = [];\n  }\n\n  end(state) {\n    const now = Date.now();\n\n    // Save the recently ended inputs as taps.\n    this.taps = this.taps.concat(state.getInputsInPhase('end'))\n      .filter(input => {\n        const tdiff = now - input.startTime;\n        return tdiff <= this.maxDelay && tdiff >= this.minDelay;\n      });\n\n    // Validate the list of taps.\n    if (this.taps.length !== this.numTaps ||\n      this.taps.some(i => i.totalDistance() > this.tolerance)) {\n      return null;\n    }\n\n    const centroid = Point2D.centroid(this.taps.map(i => i.current.point));\n    this.taps = []; // Critical! Used taps need to be cleared!\n    return { centroid, ...centroid };\n  }\n}\n\nTap.DEFAULTS = Object.freeze({\n  minDelay:  0,\n  maxDelay:  300,\n  numTaps:   1,\n  tolerance: 10,\n});\n\nmodule.exports = Tap;\n\n","/*\n * Contains the Track class.\n */\n\n'use strict';\n\nconst { Gesture } = require('westures-core');\n\n/**\n * Data returned when a Track is recognized.\n *\n * @typedef {Object} TrackData\n * @mixes ReturnTypes.BaseData\n *\n * @property {westures-core.Point2D[]} active - Points currently in 'start' or\n *    'move' phase.\n *\n * @memberof ReturnTypes\n */\n\n/**\n * A Track gesture forwards a list of active points and their centroid on each\n * of the selected phases.\n *\n * @extends westures-core.Gesture\n * @see {ReturnTypes.TrackData}\n * @memberof westures\n *\n * @param {Element} element - The element to which to associate the gesture.\n * @param {Function} handler - The function handler to execute when a gesture\n * is recognized on the associated element.\n * @param {object} [options] - Gesture customization options.\n * @param {westures-core.STATE_KEYS[]} [options.enableKeys=[]] - List of keys\n * which will enable the gesture. The gesture will not be recognized unless one\n * of these keys is pressed while the interaction occurs. If not specified or an\n * empty list, the gesture is treated as though the enable key is always down.\n * @param {westures-core.STATE_KEYS[]} [options.disableKeys=[]] - List of keys\n * which will disable the gesture. The gesture will not be recognized if one of\n * these keys is pressed while the interaction occurs. If not specified or an\n * empty list, the gesture is treated as though the disable key is never down.\n * @param {number} [options.minInputs=1] - The minimum number of pointers that\n * must be active for the gesture to be recognized. Uses >=.\n * @param {number} [options.maxInputs=Number.MAX_VALUE] - The maximum number of\n * pointers that may be active for the gesture to be recognized. Uses <=.\n * @param {string[]} [options.phases=[]] Phases to recognize. Entries can be any\n * or all of 'start', 'move', 'end', and 'cancel'.\n */\nclass Track extends Gesture {\n  constructor(element, handler, options = {}) {\n    options = { ...Track.DEFAULTS, ...options };\n    super('track', element, handler, options);\n\n    this.trackStart  = options.phases.includes('start');\n    this.trackMove   = options.phases.includes('move');\n    this.trackEnd    = options.phases.includes('end');\n    this.trackCancel = options.phases.includes('cancel');\n  }\n\n  /**\n   * Filters out the state's data, down to what should be emitted.\n\n   * @param {State} state - current input state.\n   * @return {ReturnTypes.TrackData}\n   */\n  data({ activePoints }) {\n    return { active: activePoints };\n  }\n\n  start(state) {\n    return this.trackStart ? this.data(state) : null;\n  }\n\n  move(state) {\n    return this.trackMove ? this.data(state) : null;\n  }\n\n  end(state) {\n    return this.trackEnd ? this.data(state) : null;\n  }\n\n  cancel(state) {\n    return this.trackCancel ? this.data(state) : null;\n  }\n}\n\nTrack.DEFAULTS = Object.freeze({\n  phases: Object.freeze([]),\n});\n\nmodule.exports = Track;\n\n","'use strict';\n\nconst westures = require('westures');\nconst region = new westures.Region();\nconst container = document.querySelector('#container');\n\nconst SIXTY_FPS = 1000 / 60;\nconst FRICTION = 0.95;\nconst MULTI = 7;\nconst LIMIT = 0.1;\nconst MAX_V = 7;\n\nfunction random8Bit() {\n  return Math.floor(Math.random() * 256);\n}\n\nfunction reduce(value) {\n  value *= FRICTION;\n  return (Math.abs(value) < LIMIT) ? 0 : value;\n}\n\n/**\n * Provides an interactable element using westures.\n */\nclass Interactable {\n  constructor(name, color) {\n    this.element = document.createElement('div');\n    this.element.style.backgroundColor = color;\n\n    this.label = document.createElement('h1');\n    this.label.innerText = name;\n\n    this.element.appendChild(this.label);\n    container.appendChild(this.element);\n\n    this.rotation = 0;\n    this.scale = 1;\n    this.x = 0;\n    this.y = 0;\n    this.velocityX = 0;\n    this.velocityY = 0;\n\n    this.animate = false;\n    this.update_fn = this.update.bind(this);\n    this.swipe_interval = null;\n    this.swipe_fn = this.swipeAnimation.bind(this);\n\n    this.setupTracking();\n  }\n\n  /**\n   * Setups up tracking of the interactable element.\n   */\n  setupTracking() {\n    const fns = {\n      end:   (data) => {\n        if (data.active.length == 0) {\n          this.animate = false;\n        }\n      },\n      start: () => {\n        this.animate = true;\n        window.requestAnimationFrame(this.update_fn);\n        clearInterval(this.swipe_interval);\n      },\n    };\n    region.addGesture(new westures.Track(\n      this.element,\n      (data) => fns[data.phase](data),\n      { phases: Object.keys(fns) },\n    ));\n  }\n\n  randomBackground() {\n    const R = random8Bit();\n    const G = random8Bit();\n    const B = random8Bit();\n    this.element.style.backgroundColor = `rgb(${R}, ${G}, ${B})`;\n  }\n\n  addTap(options) {\n    region.addGesture(new westures.Tap(\n      this.element,\n      () => {\n        this.randomBackground();\n      },\n      options,\n    ));\n    return this;\n  }\n\n  addPress(options) {\n    region.addGesture(new westures.Press(\n      this.element,\n      () => {\n        this.randomBackground();\n      },\n      options,\n    ));\n    return this;\n  }\n\n  addRotate(options) {\n    region.addGesture(new westures.Rotate(\n      this.element,\n      (data) => {\n        this.rotation += data.rotation;\n      },\n      options,\n    ));\n    return this;\n  }\n\n  addPan(options) {\n    region.addGesture(new westures.Pan(\n      this.element,\n      (data) => {\n        this.x += data.translation.x;\n        this.y += data.translation.y;\n      },\n      options,\n    ));\n    return this;\n  }\n\n  addSwipe(options) {\n    region.addGesture(new westures.Swipe(\n      this.element,\n      (data) => {\n        const velocity = data.velocity > MAX_V ? MAX_V : data.velocity;\n        this.velocityX = velocity * Math.cos(data.direction) * MULTI;\n        this.velocityY = velocity * Math.sin(data.direction) * MULTI;\n        this.swipe_interval = setInterval(this.swipe_fn, SIXTY_FPS);\n      },\n      options,\n    ));\n    return this;\n  }\n\n  addSwivel(options) {\n    region.addGesture(new westures.Swivel(\n      this.element,\n      (data) => {\n        this.rotation += data.rotation;\n      },\n      {\n        pivotCenter: this.element,\n        ...options,\n      },\n    ));\n    return this;\n  }\n\n  addPinch(options) {\n    region.addGesture(new westures.Pinch(\n      this.element,\n      (data) => {\n        this.scale *= data.scale;\n      },\n      options,\n    ));\n    return this;\n  }\n\n  addPull(options) {\n    region.addGesture(new westures.Pull(\n      this.element,\n      (data) => {\n        this.scale *= data.scale;\n      },\n      {\n        pivotCenter: this.element,\n        ...options,\n      },\n    ));\n    return this;\n  }\n\n  update() {\n    const rotate = `rotate(${this.rotation}rad) `;\n    const translate = `translate(${this.x}px, ${this.y}px) `;\n    const scale = `scale(${this.scale}) `;\n    this.element.style.transform = translate + rotate + scale;\n\n    if (this.animate) {\n      window.requestAnimationFrame(this.update_fn);\n    }\n  }\n\n  swipeAnimation() {\n    this.x += this.velocityX;\n    this.y += this.velocityY;\n    this.velocityX = reduce(this.velocityX);\n    this.velocityY = reduce(this.velocityY);\n    if (this.velocityY === 0 && this.velocityX === 0) {\n      clearInterval(this.swipe_interval);\n    }\n    window.requestAnimationFrame(this.update_fn);\n  }\n}\n\n/* ========================================================================== */\n\nconst NUM_COLOURS = 12;\nconst INTERVAL = Math.floor(360 / NUM_COLOURS);\nconst PALETTE = [];\n\n// Generate a Pastel Rainbow\nfor (let i = 0; i < NUM_COLOURS; i++) {\n  const hue = INTERVAL * i;\n  PALETTE.push(`hsl(${hue}, 100%, 75%)`);\n}\n\nlet cidx = 0;\nfunction nextColour() {\n  return PALETTE[cidx++];\n}\n\n// Basic gestures\nnew Interactable('TAP',    nextColour()).addTap();\nnew Interactable('PAN',    nextColour()).addPan();\nnew Interactable('PINCH',  nextColour()).addPinch();\nnew Interactable('ROTATE', nextColour()).addRotate();\nnew Interactable('SWIPE',  nextColour()).addSwipe();\nnew Interactable('PRESS',  nextColour()).addPress();\nnew Interactable('SWIVEL', nextColour()).addSwivel();\nnew Interactable('PULL',   nextColour()).addPull();\n\n// Mix and match!\n// new Interactable('ROTATE and SWIVEL', 'forestgreen').addRotate().addSwivel();\nnew Interactable(\n  'TAP, PAN, PINCH, SWIPE, and ROTATE\\n(desktop: CTRL to SWIVEL and PULL)',\n  nextColour(),\n).addTap()\n  .addPan({ disableKeys: ['ctrlKey'] })\n  .addPinch()\n  .addRotate()\n  .addSwipe()\n  .addSwivel({ enableKeys: ['ctrlKey'] })\n  .addPull({ enableKeys: ['ctrlKey'] });\nnew Interactable('DOUBLE TAP', nextColour()).addTap({\n  numTaps: 2,\n});\nnew Interactable('FIVE TAPS', nextColour()).addTap({\n  maxDelay: 1000,\n  numTaps:  5,\n});\nnew Interactable('SLOW TAP', nextColour()).addTap({\n  minDelay: 300,\n  maxDelay: 1000,\n});\n","/**\n * The API interface for Westures. Defines a number of gestures on top of the\n * engine provided by {@link\n * https://mvanderkamp.github.io/westures-core/index.html|westures-core}.\n *\n * @namespace westures\n */\n\n'use strict';\n\nconst core = require('westures-core');\n\nconst Pan     = require('./src/Pan.js');\nconst Pinch   = require('./src/Pinch.js');\nconst Press   = require('./src/Press.js');\nconst Pull    = require('./src/Pull.js');\nconst Rotate  = require('./src/Rotate.js');\nconst Swipe   = require('./src/Swipe.js');\nconst Swivel  = require('./src/Swivel.js');\nconst Tap     = require('./src/Tap.js');\nconst Track   = require('./src/Track.js');\n\nmodule.exports = {\n  Pan,\n  Pinch,\n  Press,\n  Pull,\n  Rotate,\n  Swipe,\n  Swivel,\n  Tap,\n  Track,\n  ...core,\n};\n\n/**\n * Here are the return \"types\" of the gestures that are included in this\n * package.\n *\n * @namespace ReturnTypes\n */\n\n/**\n * The base data that is included for all emitted gestures.\n *\n * @typedef {Object} BaseData\n *\n * @property {westures-core.Point2D} centroid - The centroid of the input\n * points.\n * @property {Event} event - The input event which caused the gesture to be\n * recognized.\n * @property {string} phase - 'start', 'move', 'end', or 'cancel'.\n * @property {number} radius - The distance of the furthest input to the\n * centroid.\n * @property {string} type - The name of the gesture as specified by its\n * designer.\n * @property {Element} target - The bound target of the gesture.\n *\n * @memberof ReturnTypes\n */\n\n"],"names":["g_id","Gesture","constructor","type","element","handler","options","TypeError","this","id","DEFAULTS","isEnabled","state","count","active","length","event","enableKeys","disableKeys","minInputs","maxInputs","some","k","start","move","end","cancel","evaluateHook","hook","data","recognize","centroid","phase","target","Number","MAX_VALUE","$b8165f784711ca2ea9509301ec460987$exports","Point2D","x","y","angleTo","point","Math","atan2","averageDistanceTo","points","totalDistanceTo","clone","distanceTo","hypot","minus","plus","reduce","d","p","[object Object]","total","sum","pt","$a9f1c16eb2844ad5078aca5b9c9cadcd$exports","$e65c3b58968a8967490c75ab927ceb$exports","CANCEL_EVENTS","KEYBOARD_EVENTS","MOUSE_EVENTS","POINTER_EVENTS","TOUCH_EVENTS","STATE_KEYS","STATE_KEY_STRINGS","CANCEL","END","MOVE","START","PHASE","blur","pointercancel","touchcancel","mouseup","pointerup","touchend","mousemove","pointermove","touchmove","mousedown","pointerdown","touchstart","$e2c63ed0625c9d9a3637714195d71d1$exports","identifier","clientX","clientY","changedTouches","Array","from","find","touch","getEventObject","time","Date","now","PI_2","PI","PI_NVE","setFilter","set","predicate","result","Set","forEach","add","$cb88c35c5048ce067deba28299d310e$exports","angularDifference","a","b","diff","getPropagationPath","composedPath","path","node","document","parentNode","push","window","setDifference","left","right","has","$b3c6ae729a0c29e3ffb8e800a3136321$exports","currentData","initialElements","WeakSet","initial","current","previous","startTime","totalDistance","update","symbols","Symbol","for","update_fns","TouchEvent","updateInput","PointerEvent","pointerId","MouseEvent","button","$bbe3896aa15254af9d176bc7ed12134$exports","Map","inputs","activePoints","clearEndedInputs","v","delete","getInputsInPhase","filter","i","getInputsNotInPhase","hasNoInputs","size","setPointerCapture","e","releasePointerCapture","get","console","warn","updateAllInputs","name","call","updateFields","values","map","Region","gestures","activeGestures","potentialGestures","activate","eventNames","preferPointer","concat","arbitrate","bind","eventName","addEventListener","capture","once","passive","handleKeyboardEvent","preventDefault","input","gesture","resetActiveGestures","indexOf","key","oldActiveGestures","setActiveGestures","setPotentialGestures","updateActiveGestures","isInitial","pruneActiveGestures","addGesture","style","touchAction","removeGesture","getGesturesByElement","removeGesturesByElement","g","$b35e9ce38371f4b5c2c71082$exports","cascade","smooth","Smoothable","final_options","next","isRequested","matchMedia","matches","smoothingIsApplicable","applySmoothing","identity","restart","average","$a682b04db3f0b839c6a1248a2c0b00e9$exports","Input","PointerData","State","$f916f27a9eac277b62251d321cc72$exports","super","outgoing","translation","Pinch","distance","scale","Object","freeze","$c96eb23c7cc561d80bc3502a9ebe01d$exports","Press","delay","tolerance","identifiers","setTimeout","$e2d3614b4e65ef9b7a0a587c651b94f5$exports","getClientCenter","rect","getBoundingClientRect","width","top","height","Pivotable","deadzoneRadius","dynamicPivot","pivot","updatePrevious","$b6755fdd269861ed8a6994146$exports","$c6441e036cb91e00d207bc27797f4e$exports","rv","Rotate","previousAngles","anglesFromCentroid","getRotation","stagedAngles","angle","index","rotation","$ac0822020c0a3735d09983cff2e194c0$exports","$f4d5991566b501399214$exports","moves","saved","splice","getResult","validate","PROGRESS_STACK_SIZE","velocity","vlim","max","calc_velocity","direction","sin","cos","calc_angle","$d76a8f3240d2450f48fd5fd735a2e29$exports","Tap","minDelay","maxDelay","numTaps","taps","tdiff","$b98740836e10ae9284e0abc044614$exports","Track","trackStart","phases","includes","trackMove","trackEnd","trackCancel","region","$b8279329fe4b6cfcbcc7d7d86b0faa73$exports","Pan","Pull","Swipe","Swivel","container","querySelector","random8Bit","floor","random","value","abs","Interactable","color","$e0468e1fb8d0d74e2411cd420d629dc$var$_classCallCheck","createElement","backgroundColor","label","innerText","appendChild","velocityX","velocityY","animate","update_fn","swipe_interval","swipe_fn","swipeAnimation","setupTracking","_this","fns","requestAnimationFrame","clearInterval","keys","R","G","B","_this2","randomBackground","_this3","_this4","_this5","_this6","setInterval","_this7","$e0468e1fb8d0d74e2411cd420d629dc$var$_objectSpread","pivotCenter","_this8","_this9","rotate","translate","transform","INTERVAL","PALETTE","hue","cidx","nextColour","addTap","addPan","addPinch","addRotate","addSwipe","addPress","addSwivel","addPull"],"version":3,"file":"sample.js.map"}