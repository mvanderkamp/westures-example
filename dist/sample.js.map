{"version":3,"sources":["node_modules/westures-core/src/Gesture.js","node_modules/westures-core/src/Point2D.js","node_modules/westures-core/src/Binding.js","node_modules/westures-core/src/PHASE.js","node_modules/westures-core/src/PointerData.js","node_modules/westures-core/src/Input.js","node_modules/westures-core/src/State.js","node_modules/westures-core/src/Region.js","node_modules/westures-core/src/Smoothable.js","node_modules/westures-core/index.js","node_modules/westures/src/Pan.js","node_modules/westures/src/Pinch.js","node_modules/westures/src/Press.js","node_modules/westures/src/angularMinus.js","node_modules/westures/src/Rotate.js","node_modules/westures/src/Swipe.js","node_modules/westures/src/Swivel.js","node_modules/westures/src/Tap.js","node_modules/westures/src/Track.js","node_modules/westures/index.js","sample.js"],"names":["nextGestureNum","Gesture","type","TypeError","id","module","exports","Point2D","x","y","point","Math","atan2","points","totalDistanceTo","length","hypot","reduce","d","p","distanceTo","total","sum","pt","plus","Binding","element","gesture","handler","hook","state","data","centroid","event","phase","radius","target","PHASE","Object","freeze","mousedown","touchstart","pointerdown","mousemove","touchmove","pointermove","mouseup","touchend","pointerup","touchcancel","pointercancel","require","getEventObject","identifier","changedTouches","Array","from","find","t","PointerData","originalEvent","time","Date","now","eventObj","clientX","clientY","pdata","angleTo","getPropagationPath","composedPath","path","node","document","parentNode","push","window","getElementsInPath","WeakSet","Input","currentData","initialElements","initial","current","previous","progress","has","symbols","inputs","Symbol","for","update_fns","TouchEvent","forEach","touch","updateInput","PointerEvent","pointerId","MouseEvent","button","State","Map","active","activePoints","v","k","delete","filter","i","size","set","setPointerCapture","e","releasePointerCapture","get","update","console","warn","constructor","name","call","updateFields","values","getInputsNotInPhase","map","acc","cur","dist","POINTER_EVENTS","MOUSE_EVENTS","TOUCH_EVENTS","CANCEL_EVENTS","Region","capture","preventDefault","bindings","activeBindings","isWaiting","activate","eventNames","concat","arbiter","arbitrate","bind","eventName","addEventListener","once","passive","eventname","resetActiveBindings","input","b","wasInitiallyInside","hasNoActiveInputs","updateAllInputs","updateActiveBindings","binding","evaluateHook","clearEndedInputs","pruneActiveBindings","getBindingsByElement","splice","indexOf","DEFAULTS","cascade","smooth","smoothingIsApplicable","isRequested","matchMedia","matches","Smoothable","superclass","options","smoothing","identity","next","field","avg","smoothingAverage","a","Pan","settings","muteKey","minInputs","restart","translation","minus","Pinch","distance","averageDistanceTo","scale","Press","delay","numInputs","tolerance","timeout","setTimeout","recognize","clearTimeout","PI2","PI","angularMinus","diff","Rotate","previousAngles","angle","stagedAngles","idx","currentAngle","getAngle","rotation","REQUIRED_INPUTS","PROGRESS_STACK_SIZE","MS_THRESHOLD","calc_angle","moves","vlim","sin","cos","velocity","start","end","calc_velocity","max","Swipe","saved","refresh","result","getResult","validate","direction","Swivel","deadzoneRadius","enableKey","pivotCenter","pivot","isActive","rect","getBoundingClientRect","left","width","top","height","enabled","getInputsInPhase","output","calculateOutput","defaults","MIN_DELAY_MS","MAX_DELAY_MS","NUM_INPUTS","MOVE_PX_TOLERANCE","Tap","minDelay","maxDelay","ended","tdiff","startTime","some","totalDistance","Track","phases","trackStart","includes","trackMove","trackEnd","trackCancel","westures","region","body","container","querySelector","SIXTY_FPS","FRICTION","MULTI","LIMIT","MAX_V","random8Bit","floor","random","value","abs","Interactable","color","createElement","style","backgroundColor","label","innerText","appendChild","velocityX","velocityY","update_interval","swipe_interval","animate_swipe","clearInterval","setupTracking","addGesture","setInterval","R","G","B","randomBackground","rotate","translate","transform","NUM_COLOURS","INTERVAL","PALETTE","hue","cidx","nextColour","addTap","addSwivel","addPan","addPinch","addRotate","addSwipe","addPress"],"mappings":"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","file":"sample.js","sourceRoot":"..","sourcesContent":["/*\n * Contains the Gesture class\n */\n\n'use strict';\n\nlet nextGestureNum = 0;\n\n/**\n * The Gesture class that all gestures inherit from. A custom gesture class will\n * need to override some or all of the four phase \"hooks\": start, move, end, and\n * cancel.\n *\n * @memberof westures-core\n */\nclass Gesture {\n  /**\n   * Constructor function for the Gesture class.\n   *\n   * @param {string} type - The name of the gesture.\n   */\n  constructor(type) {\n    if (typeof type !== 'string') {\n      throw new TypeError('Gestures require a string type / name');\n    }\n\n    /**\n     * The name of the gesture. (e.g. 'pan' or 'tap' or 'pinch').\n     *\n     * @type {string}\n     */\n    this.type = type;\n\n    /**\n     * The unique identifier for each gesture. This allows for distinctions\n     * across instances of Gestures that are created on the fly (e.g.\n     * gesture-tap-1, gesture-tap-2).\n     *\n     * @type {string}\n     */\n    this.id = `gesture-${this.type}-${nextGestureNum++}`;\n  }\n\n  /**\n   * Event hook for the start phase of a gesture.\n   *\n   * @param {State} state - The input state object of the current region.\n   *\n   * @return {?Object} Gesture is considered recognized if an Object is\n   *    returned.\n   */\n  start() {\n    return null;\n  }\n\n  /**\n   * Event hook for the move phase of a gesture.\n   *\n   * @param {State} state - The input state object of the current region.\n   *\n   * @return {?Object} Gesture is considered recognized if an Object is\n   *    returned.\n   */\n  move() {\n    return null;\n  }\n\n  /**\n   * Event hook for the end phase of a gesture.\n   *\n   * @param {State} state - The input state object of the current region.\n   *\n   * @return {?Object} Gesture is considered recognized if an Object is\n   *    returned.\n   */\n  end() {\n    return null;\n  }\n\n  /**\n   * Event hook for when an input is cancelled.\n   *\n   * @param {State} state - The input state object of the current region.\n   *\n   * @return {?Object} Gesture is considered recognized if an Object is\n   *    returned.\n   */\n  cancel() {\n    return null;\n  }\n}\n\nmodule.exports = Gesture;\n\n","/*\n * Contains the {@link Point2D} class.\n */\n\n'use strict';\n\n/**\n * The Point2D class stores and operates on 2-dimensional points, represented as\n * x and y coordinates.\n *\n * @memberof westures-core\n */\nclass Point2D {\n  /**\n   * Constructor function for the Point2D class.\n   *\n   * @param {number} [ x=0 ] - The x coordinate of the point.\n   * @param {number} [ y=0 ] - The y coordinate of the point.\n   */\n  constructor(x = 0, y = 0) {\n    /**\n     * The x coordinate of the point.\n     *\n     * @type {number}\n     */\n    this.x = x;\n\n    /**\n     * The y coordinate of the point.\n     *\n     * @type {number}\n     */\n    this.y = y;\n  }\n\n  /**\n   * Calculates the angle between this point and the given point.\n   *\n   * @param {!westures-core.Point2D} point - Projected point for calculating the\n   * angle.\n   *\n   * @return {number} Radians along the unit circle where the projected\n   * point lies.\n   */\n  angleTo(point) {\n    return Math.atan2(point.y - this.y, point.x - this.x);\n  }\n\n  /**\n   * Determine the average distance from this point to the provided array of\n   * points.\n   *\n   * @param {!westures-core.Point2D[]} points - the Point2D objects to calculate\n   *    the average distance to.\n   *\n   * @return {number} The average distance from this point to the provided\n   *    points.\n   */\n  averageDistanceTo(points) {\n    return this.totalDistanceTo(points) / points.length;\n  }\n\n  /**\n   * Clone this point.\n   *\n   * @return {westures-core.Point2D} A new Point2D, identical to this point.\n   */\n  clone() {\n    return new Point2D(this.x, this.y);\n  }\n\n  /**\n   * Calculates the distance between two points.\n   *\n   * @param {!westures-core.Point2D} point - Point to which the distance is\n   * calculated.\n   *\n   * @return {number} The distance between the two points, a.k.a. the\n   *    hypoteneuse.\n   */\n  distanceTo(point) {\n    return Math.hypot(point.x - this.x, point.y - this.y);\n  }\n\n  /**\n   * Subtract the given point from this point.\n   *\n   * @param {!westures-core.Point2D} point - Point to subtract from this point.\n   *\n   * @return {westures-core.Point2D} A new Point2D, which is the result of (this\n   * - point).\n   */\n  minus(point) {\n    return new Point2D(\n      this.x - point.x,\n      this.y - point.y\n    );\n  }\n\n  /**\n   * Return the summation of this point to the given point.\n   *\n   * @param {!westures-core.Point2D} point - Point to add to this point.\n   *\n   * @return {westures-core.Point2D} A new Point2D, which is the addition of the\n   * two points.\n   */\n  plus(point) {\n    return new Point2D(\n      this.x + point.x,\n      this.y + point.y,\n    );\n  }\n\n  /**\n   * Calculates the total distance from this point to an array of points.\n   *\n   * @param {!westures-core.Point2D[]} points - The array of Point2D objects to\n   *    calculate the total distance to.\n   *\n   * @return {number} The total distance from this point to the provided points.\n   */\n  totalDistanceTo(points) {\n    return points.reduce((d, p) => d + this.distanceTo(p), 0);\n  }\n\n  /**\n   * Calculates the centroid of a list of points.\n   *\n   * @param {westures-core.Point2D[]} points - The array of Point2D objects for\n   * which to calculate the centroid.\n   *\n   * @return {westures-core.Point2D} The centroid of the provided points.\n   */\n  static centroid(points = []) {\n    if (points.length === 0) return null;\n\n    const total = Point2D.sum(points);\n    return new Point2D(\n      total.x / points.length,\n      total.y / points.length,\n    );\n  }\n\n  /**\n   * Calculates the sum of the given points.\n   *\n   * @param {westures-core.Point2D[]} points - The Point2D objects to sum up.\n   *\n   * @return {westures-core.Point2D} A new Point2D representing the sum of the\n   * given points.\n   */\n  static sum(points = []) {\n    return points.reduce((total, pt) => total.plus(pt), new Point2D(0, 0));\n  }\n}\n\nmodule.exports = Point2D;\n\n","/*\n * Contains the Binding class.\n */\n\n'use strict';\n\n/**\n * A Binding associates a gesture with an element and a handler function that\n * will be called when the gesture is recognized.\n *\n * @private\n */\nclass Binding {\n  /**\n   * Constructor function for the Binding class.\n   *\n   * @param {Element} element - The element to which to associate the gesture.\n   * @param {westures-core.Gesture} gesture - A instance of the Gesture type.\n   * @param {Function} handler - The function handler to execute when a gesture\n   *    is recognized on the associated element.\n   */\n  constructor(element, gesture, handler) {\n    /**\n     * The element to which to associate the gesture.\n     *\n     * @private\n     * @type {Element}\n     */\n    this.element = element;\n\n    /**\n     * The gesture to associate with the given element.\n     *\n     * @private\n     * @type {westures-core.Gesture}\n     */\n    this.gesture = gesture;\n\n    /**\n     * The function handler to execute when the gesture is recognized on the\n     * associated element.\n     *\n     * @private\n     * @type {Function}\n     */\n    this.handler = handler;\n  }\n\n  /**\n   * Evalutes the given gesture hook, and dispatches any data that is produced.\n   *\n   * @private\n   *\n   * @param {string} hook - Must be one of 'start', 'move', 'end', or 'cancel'.\n   * @param {State} state - The current State instance.\n   */\n  evaluateHook(hook, state) {\n    const data = this.gesture[hook](state);\n    if (data) {\n      this.handler({\n        centroid: state.centroid,\n        event:    state.event,\n        phase:    hook,\n        radius:   state.radius,\n        type:     this.gesture.type,\n        target:   this.element,\n        ...data,\n      });\n    }\n  }\n}\n\nmodule.exports = Binding;\n\n","/*\n * Contains the PHASE object, which translates event names to phases\n * (a.k.a. hooks).\n */\n\n'use strict';\n\n/**\n * Normalizes window events to be either of type start, move, or end.\n *\n * @private\n * @enum {string}\n */\nconst PHASE = Object.freeze({\n  mousedown:   'start',\n  touchstart:  'start',\n  pointerdown: 'start',\n\n  mousemove:   'move',\n  touchmove:   'move',\n  pointermove: 'move',\n\n  mouseup:       'end',\n  touchend:      'end',\n  pointerup:     'end',\n\n  touchcancel:   'cancel',\n  pointercancel: 'cancel',\n});\n\nmodule.exports = PHASE;\n\n","/*\n * Contains the {@link PointerData} class\n */\n\n'use strict';\n\nconst Point2D = require('./Point2D.js');\nconst PHASE   = require('./PHASE.js');\n\n/**\n * @private\n * @inner\n * @memberof PointerData\n *\n * @return {Event} The Event object which corresponds to the given identifier.\n *    Contains clientX, clientY values.\n */\nfunction getEventObject(event, identifier) {\n  if (event.changedTouches) {\n    return Array.from(event.changedTouches).find(t => {\n      return t.identifier === identifier;\n    });\n  }\n  return event;\n}\n\n/**\n * Low-level storage of pointer data based on incoming data from an interaction\n * event.\n *\n * @hideconstructor\n */\nclass PointerData {\n  /**\n   * @constructor\n   *\n   * @param {Event} event - The event object being wrapped.\n   * @param {number} identifier - The index of touch if applicable\n   */\n  constructor(event, identifier) {\n    /**\n     * The original event object.\n     *\n     * @type {Event}\n     */\n    this.originalEvent = event;\n\n    /**\n     * The type or 'phase' of this batch of pointer data. 'start' or 'move' or\n     * 'end'.\n     *\n     * @type {string}\n     */\n    this.type = PHASE[event.type];\n\n    /**\n     * The timestamp of the event in milliseconds elapsed since January 1, 1970,\n     * 00:00:00 UTC.\n     *\n     * @type {number}\n     */\n    this.time = Date.now();\n\n    const eventObj = getEventObject(event, identifier);\n    /**\n     * The (x,y) coordinate of the event, wrapped in a Point2D.\n     *\n     * @type {westures-core.Point2D}\n     */\n    // this.point = new Point2D(eventObj.pageX, eventObj.pageY);\n    this.point = new Point2D(eventObj.clientX, eventObj.clientY);\n  }\n\n  /**\n   * Calculates the angle between this event and the given event.\n   *\n   * @param {PointerData} pdata\n   *\n   * @return {number} Radians measurement between this event and the given\n   *    event's points.\n   */\n  angleTo(pdata) {\n    return this.point.angleTo(pdata.point);\n  }\n\n  /**\n   * Calculates the distance between two PointerDatas.\n   *\n   * @param {PointerData} pdata\n   *\n   * @return {number} The distance between the two points, a.k.a. the\n   *    hypoteneuse.\n   */\n  distanceTo(pdata) {\n    return this.point.distanceTo(pdata.point);\n  }\n}\n\nmodule.exports = PointerData;\n\n","/*\n * Contains the {@link Input} class\n */\n\n'use strict';\n\nconst PointerData = require('./PointerData.js');\n\n/**\n * In case event.composedPath() is not available.\n *\n * @private\n * @inner\n * @memberof Input\n *\n * @param {Event} event\n *\n * @return {Element[]} The elements along the composed path of the event.\n */\nfunction getPropagationPath(event) {\n  if (typeof event.composedPath === 'function') {\n    return event.composedPath();\n  }\n\n  const path = [];\n  for (let node = event.target; node !== document; node = node.parentNode) {\n    path.push(node);\n  }\n  path.push(document);\n  path.push(window);\n\n  return path;\n}\n\n/**\n * A WeakSet is used so that references will be garbage collected when the\n * element they point to is removed from the page.\n *\n * @private\n * @inner\n * @memberof Input\n * @return {WeakSet.<Element>} The Elements in the path of the given event.\n */\nfunction getElementsInPath(event) {\n  return new WeakSet(getPropagationPath(event));\n}\n\n/**\n * Tracks a single input and contains information about the current, previous,\n * and initial events. Contains the progress of each Input and its associated\n * gestures.\n *\n * @hideconstructor\n */\nclass Input {\n  /**\n   * Constructor function for the Input class.\n   *\n   * @param {(PointerEvent | MouseEvent | TouchEvent)} event - The input event\n   *    which will initialize this Input object.\n   * @param {number} identifier - The identifier for this input, so that it can\n   *    be located in subsequent Event objects.\n   */\n  constructor(event, identifier) {\n    const currentData = new PointerData(event, identifier);\n\n    /**\n     * The set of elements along the original event's propagation path at the\n     * time it was dispatched.\n     *\n     * @private\n     * @type {WeakSet.<Element>}\n     */\n    this.initialElements = getElementsInPath(event);\n\n    /**\n     * Holds the initial data from the mousedown / touchstart / pointerdown that\n     * began this input.\n     *\n     * @type {PointerData}\n     */\n    this.initial = currentData;\n\n    /**\n     * Holds the most current pointer data for this Input.\n     *\n     * @type {PointerData}\n     */\n    this.current = currentData;\n\n    /**\n     * Holds the previous pointer data for this Input.\n     *\n     * @type {PointerData}\n     */\n    this.previous = currentData;\n\n    /**\n     * The identifier for the pointer / touch / mouse button associated with\n     * this input.\n     *\n     * @type {number}\n     */\n    this.identifier = identifier;\n\n    /**\n     * Stores internal state between events for each gesture based off of the\n     * gesture's id.\n     *\n     * @private\n     * @type {Object}\n     */\n    this.progress = {};\n  }\n\n  /**\n   * The phase of the input: 'start' or 'move' or 'end'\n   *\n   * @type {string}\n   */\n  get phase() { return this.current.type; }\n\n  /**\n   * The timestamp of the initiating event for this input.\n   *\n   * @type {number}\n   */\n  get startTime() { return this.initial.time; }\n\n  /**\n   * @private\n   *\n   * @param {string} id - The ID of the gesture whose progress is sought.\n   *\n   * @return {Object} The progress of the gesture.\n   */\n  getProgressOfGesture(id) {\n    if (!this.progress[id]) {\n      this.progress[id] = {};\n    }\n    return this.progress[id];\n  }\n\n  /**\n   * @return {number} The distance between the initiating event for this input\n   *    and its current event.\n   */\n  totalDistance() {\n    return this.initial.distanceTo(this.current);\n  }\n\n  /**\n   * Saves the given raw event in PointerData form as the current data for this\n   * input, pushing the old current data into the previous slot, and tossing\n   * out the old previous data.\n   *\n   * @private\n   *\n   * @param {Event} event - The event object to wrap with a PointerData.\n   */\n  update(event) {\n    this.previous = this.current;\n    this.current = new PointerData(event, this.identifier);\n  }\n\n  /**\n   * Determines if this PointerData was inside the given element at the time it\n   * was dispatched.\n   *\n   * @private\n   *\n   * @param {Element} element\n   *\n   * @return {boolean} true if the Input began inside the element, false\n   *    otherwise.\n   */\n  wasInitiallyInside(element) {\n    return this.initialElements.has(element);\n  }\n}\n\nmodule.exports = Input;\n\n","/*\n * Contains the {@link State} class\n */\n\n'use strict';\n\nconst Input   = require('./Input.js');\nconst PHASE   = require('./PHASE.js');\nconst Point2D = require('./Point2D.js');\n\nconst symbols = Object.freeze({\n  inputs: Symbol.for('inputs'),\n});\n\n/*\n * Set of helper functions for updating inputs based on type of input.\n * Must be called with a bound 'this', via bind(), or call(), or apply().\n *\n * @private\n * @inner\n * @memberof State\n */\nconst update_fns = {\n  TouchEvent: function TouchEvent(event) {\n    Array.from(event.changedTouches).forEach(touch => {\n      this.updateInput(event, touch.identifier);\n    });\n  },\n\n  PointerEvent: function PointerEvent(event) {\n    this.updateInput(event, event.pointerId);\n  },\n\n  MouseEvent: function MouseEvent(event) {\n    if (event.button === 0) {\n      this.updateInput(event, event.button);\n    }\n  },\n};\n\n/**\n * Keeps track of currently active and ending input points on the interactive\n * surface.\n *\n * @hideconstructor\n */\nclass State {\n  /**\n   * Constructor for the State class.\n   *\n   * @param {Element} element - The element underpinning the associated Region.\n   */\n  constructor(element) {\n    /**\n     * Keep a reference to the element for the associated region.\n     *\n     * @private\n     * @type {Element}\n     */\n    this.element = element;\n\n    /**\n     * Keeps track of the current Input objects.\n     *\n     * @private\n     * @alias [@@inputs]\n     * @type {Map.<Input>}\n     * @memberof State\n     */\n    this[symbols.inputs] = new Map();\n\n    /**\n     * All currently valid inputs, including those that have ended.\n     *\n     * @type {Input[]}\n     */\n    this.inputs = [];\n\n    /**\n     * The array of currently active inputs, sourced from the current Input\n     * objects. \"Active\" is defined as not being in the 'end' phase.\n     *\n     * @type {Input[]}\n     */\n    this.active = [];\n\n    /**\n     * The array of latest point data for the currently active inputs, sourced\n     * from this.active.\n     *\n     * @type {westures-core.Point2D[]}\n     */\n    this.activePoints = [];\n\n    /**\n     * The centroid of the currently active points.\n     *\n     * @type {westures-core.Point2D}\n     */\n    this.centroid = {};\n\n    /**\n     * The latest event that the state processed.\n     *\n     * @type {Event}\n     */\n    this.event = null;\n  }\n\n  /**\n   * Deletes all inputs that are in the 'end' phase.\n   *\n   * @private\n   */\n  clearEndedInputs() {\n    this[symbols.inputs].forEach((v, k) => {\n      if (v.phase === 'end') this[symbols.inputs].delete(k);\n    });\n  }\n\n  /**\n   * @param {string} phase - One of 'start', 'move', or 'end'.\n   *\n   * @return {Input[]} Inputs in the given phase.\n   */\n  getInputsInPhase(phase) {\n    return this.inputs.filter(i => i.phase === phase);\n  }\n\n  /**\n   * @param {string} phase - One of 'start', 'move', or 'end'.\n   *\n   * @return {Input[]} Inputs <b>not</b> in the given phase.\n   */\n  getInputsNotInPhase(phase) {\n    return this.inputs.filter(i => i.phase !== phase);\n  }\n\n  /**\n   * @private\n   * @return {boolean} True if there are no active inputs. False otherwise.\n   */\n  hasNoActiveInputs() {\n    return this[symbols.inputs].size === 0;\n  }\n\n  /**\n   * Update the input with the given identifier using the given event.\n   *\n   * @private\n   *\n   * @param {Event} event - The event being captured.\n   * @param {number} identifier - The identifier of the input to update.\n   */\n  updateInput(event, identifier) {\n    switch (PHASE[event.type]) {\n    case 'start':\n      this[symbols.inputs].set(identifier, new Input(event, identifier));\n      try {\n        this.element.setPointerCapture(identifier);\n      } catch (e) { null; }\n      break;\n    case 'end':\n      try {\n        this.element.releasePointerCapture(identifier);\n      } catch (e) { null; }\n    case 'move':\n    case 'cancel':\n      if (this[symbols.inputs].has(identifier)) {\n        this[symbols.inputs].get(identifier).update(event);\n      }\n      break;\n    default:\n      console.warn(`Unrecognized event type: ${event.type}`);\n    }\n  }\n\n  /**\n   * Updates the inputs with new information based upon a new event being fired.\n   *\n   * @private\n   * @param {Event} event - The event being captured.\n   */\n  updateAllInputs(event) {\n    update_fns[event.constructor.name].call(this, event);\n    this.updateFields(event);\n  }\n\n  /**\n   * Updates the convenience fields.\n   *\n   * @private\n   * @param {Event} event - Event with which to update the convenience fields.\n   */\n  updateFields(event = null) {\n    this.inputs = Array.from(this[symbols.inputs].values());\n    this.active = this.getInputsNotInPhase('end');\n    this.activePoints = this.active.map(i => i.current.point);\n    this.centroid = Point2D.centroid(this.activePoints);\n    this.radius = this.activePoints.reduce((acc, cur) => {\n      const dist = cur.distanceTo(this.centroid);\n      return dist > acc ? dist : acc;\n    }, 0);\n    if (event) this.event = event;\n  }\n}\n\nmodule.exports = State;\n\n","/*\n * Contains the {@link Region} class\n */\n\n'use strict';\n\nconst Binding = require('./Binding.js');\nconst State   = require('./State.js');\nconst PHASE   = require('./PHASE.js');\n\nconst POINTER_EVENTS = [\n  'pointerdown',\n  'pointermove',\n  'pointerup',\n];\n\nconst MOUSE_EVENTS = [\n  'mousedown',\n  'mousemove',\n  'mouseup',\n];\n\nconst TOUCH_EVENTS = [\n  'touchstart',\n  'touchmove',\n  'touchend',\n];\n\nconst CANCEL_EVENTS = [\n  'pointercancel',\n  'touchcancel',\n];\n\n/**\n * Allows the user to specify the control region which will listen for user\n * input events.\n *\n * @memberof westures-core\n */\nclass Region {\n  /**\n   * Constructor function for the Region class.\n   *\n   * @param {Element} element - The element which should listen to input events.\n   * @param {object} [options]\n   * @param {boolean} [options.capture=false] - Whether the region uses the\n   * capture phase of input events. If false, uses the bubbling phase.\n   * @param {boolean} [options.preventDefault=true] - Whether the default\n   * browser functionality should be disabled. This option should most likely be\n   * ignored. Here there by dragons if set to false.\n   * @param {string} [options.source='page'] - One of 'page', 'client', or\n   * 'screen'. Determines what the source of (x,y) coordinates will be from the\n   * input events. ('X' and 'Y' will be appended, then those are the properties\n   * that will be looked up). *** NOT YET IMPLEMENTED ***\n   */\n  // constructor(element, options = {}) {\n  constructor(element, capture = false, preventDefault = true) {\n    // const settings = { ...Region.DEFAULTS, ...options };\n\n    /**\n     * The list of relations between elements, their gestures, and the handlers.\n     *\n     * @private\n     * @type {Binding[]}\n     */\n    this.bindings = [];\n\n    /**\n     * The list of active bindings for the current input session.\n     *\n     * @private\n     * @type {Binding[]}\n     */\n    this.activeBindings = [];\n\n    /**\n     * Whether an input session is currently active.\n     *\n     * @private\n     * @type {boolean}\n     */\n    this.isWaiting = true;\n\n    /**\n     * The element being bound to.\n     *\n     * @private\n     * @type {Element}\n     */\n    this.element = element;\n\n    /**\n     * Whether the region listens for captures or bubbles.\n     *\n     * @private\n     * @type {boolean}\n     */\n    this.capture = capture;\n\n    /**\n     * Whether the default browser functionality should be disabled. This option\n     * should most likely be ignored. Here there by dragons if set to false.\n     *\n     * @private\n     * @type {boolean}\n     */\n    this.preventDefault = preventDefault;\n\n    /**\n     * The internal state object for a Region.  Keeps track of inputs.\n     *\n     * @private\n     * @type {State}\n     */\n    this.state = new State(this.element);\n\n    // Begin operating immediately.\n    this.activate();\n  }\n\n  /**\n   * Activates the region by adding event listeners for all appropriate input\n   * events to the region's element.\n   *\n   * @private\n   */\n  activate() {\n    /*\n     * Having to listen to both mouse and touch events is annoying, but\n     * necessary due to conflicting standards and browser implementations.\n     * Pointer is a fallback for now instead of the primary, until I figure out\n     * all the details to do with pointer-events and touch-action and their\n     * cross browser compatibility.\n     *\n     * Listening to both mouse and touch comes with the difficulty that\n     * preventDefault() must be called to prevent both events from iterating\n     * through the system. However I have left it as an option to the end user,\n     * which defaults to calling preventDefault(), in case there's a use-case I\n     * haven't considered or am not aware of.\n     *\n     * It is also a good idea to keep regions small in large pages.\n     *\n     * See:\n     *  https://www.html5rocks.com/en/mobile/touchandmouse/\n     *  https://developer.mozilla.org/en-US/docs/Web/API/Touch_events\n     *  https://developer.mozilla.org/en-US/docs/Web/API/Pointer_events\n     */\n    let eventNames = [];\n    if (window.TouchEvent || window.MouseEvent) {\n      eventNames = MOUSE_EVENTS.concat(TOUCH_EVENTS);\n    } else {\n      eventNames = POINTER_EVENTS;\n    }\n\n    // Bind detected browser events to the region element.\n    const arbiter = this.arbitrate.bind(this);\n    eventNames.forEach(eventName => {\n      this.element.addEventListener(eventName, arbiter, {\n        capture: this.capture,\n        once:    false,\n        passive: false,\n      });\n    });\n\n    ['blur'].concat(CANCEL_EVENTS).forEach(eventname => {\n      window.addEventListener(eventname, (e) => {\n        e.preventDefault();\n        this.state = new State(this.element);\n        this.resetActiveBindings();\n      });\n    });\n  }\n\n  /**\n   * Resets the active bindings.\n   *\n   * @private\n   */\n  resetActiveBindings() {\n    this.activeBindings = [];\n    this.isWaiting = true;\n  }\n\n  /**\n   * Selects the bindings that are active for the current input sequence.\n   *\n   * @private\n   */\n  updateActiveBindings() {\n    if (this.isWaiting && this.state.inputs.length > 0) {\n      const input = this.state.inputs[0];\n      this.activeBindings = this.bindings.filter(b => {\n        return input.wasInitiallyInside(b.element);\n      });\n      this.isWaiting = false;\n    }\n  }\n\n  /**\n   * Evaluates whether the current input session has completed.\n   *\n   * @private\n   */\n  pruneActiveBindings() {\n    if (this.state.hasNoActiveInputs()) {\n      this.resetActiveBindings();\n    }\n  }\n\n  /**\n   * All input events flow through this function. It makes sure that the input\n   * state is maintained, determines which bindings to analyze based on the\n   * initial position of the inputs, calls the relevant gesture hooks, and\n   * dispatches gesture data.\n   *\n   * @private\n   * @param {Event} event - The event emitted from the window object.\n   */\n  arbitrate(event) {\n    this.state.updateAllInputs(event);\n    this.updateActiveBindings();\n\n    if (this.activeBindings.length > 0) {\n      if (this.preventDefault) event.preventDefault();\n\n      this.activeBindings.forEach(binding => {\n        binding.evaluateHook(PHASE[event.type], this.state);\n      });\n    }\n\n    this.state.clearEndedInputs();\n    this.pruneActiveBindings();\n  }\n\n  /**\n   * Bind an element to a gesture with an associated handler.\n   *\n   * @param {Element} element - The element object.\n   * @param {westures-core.Gesture} gesture - Gesture type with which to bind.\n   * @param {Function} handler - The function to execute when a gesture is\n   *    recognized.\n   */\n  addGesture(element, gesture, handler) {\n    this.bindings.push(new Binding(element, gesture, handler));\n  }\n\n  /**\n   * Retrieves Bindings by their associated element.\n   *\n   * @private\n   *\n   * @param {Element} element - The element for which to find bindings.\n   *\n   * @return {Binding[]} Bindings to which the element is bound.\n   */\n  getBindingsByElement(element) {\n    return this.bindings.filter(b => b.element === element);\n  }\n\n  /**\n   * Unbinds an element from either the specified gesture or all if no gesture\n   * is specified.\n   *\n   * @param {Element} element - The element to unbind.\n   * @param {westures-core.Gesture} [ gesture ] - The gesture to unbind. If\n   * undefined, will unbind all Bindings associated with the given element.\n   */\n  removeGestures(element, gesture) {\n    this.getBindingsByElement(element).forEach(b => {\n      if (gesture == null || b.gesture === gesture) {\n        this.bindings.splice(this.bindings.indexOf(b), 1);\n      }\n    });\n  }\n}\n\nRegion.DEFAULTS = Object.freeze({\n  capture:        false,\n  preventDefault: true,\n});\n\nmodule.exports = Region;\n\n","/*\n * Contains the abstract Pinch class.\n */\n\n'use strict';\n\nconst cascade = Symbol('cascade');\nconst smooth = Symbol('smooth');\n\n/**\n * Determines whether to apply smoothing. Smoothing is on by default but turned\n * off if either:\n *  1. The user explicitly requests that it be turned off.\n *  2. The active poiner is not \"coarse\".\n *\n * @see {@link\n * https://developer.mozilla.org/en-US/docs/Web/API/Window/matchMedia}\n *\n * @private\n * @inner\n * @memberof westures-core.Smoothable\n *\n * @param {boolean} isRequested - Whether smoothing was requested by the user.\n *\n * @returns {boolean} Whether to apply smoothing.\n */\nfunction smoothingIsApplicable(isRequested = true) {\n  if (isRequested) {\n    try {\n      return window.matchMedia('(pointer: coarse)').matches;\n    } catch (e) {\n      console.warn(e);\n    }\n    return true;\n  }\n  return false;\n}\n\n/**\n * A Smoothable gesture is one that emits on 'move' events. It provides a\n * 'smoothing' option through its constructor, and will apply smoothing before\n * emitting. There will be a tiny, ~1/60th of a second delay to emits, as well\n * as a slight amount of drift over gestures sustained for a long period of\n * time.\n *\n * For a gesture to make use of smoothing, it must return `this.smooth(data,\n * field)` from the `move` phase, instead of returning the data directly. If the\n * data being smoothed is not a simple number, it must also override the\n * `smoothingAverage(a, b)` method. Also you will probably want to call\n * `super.restart()` at some point in the `start`, `end`, and `cancel` phases.\n *\n * @memberof westures-core\n * @mixin\n */\nconst Smoothable = (superclass) => class Smoothable extends superclass {\n  /**\n   * @param {string} name - The name of the gesture.\n   * @param {Object} [options]\n   * @param {boolean} [options.smoothing=true] Whether to apply smoothing to\n   * emitted data.\n   */\n  constructor(name, options = {}) {\n    super(name, options);\n\n    /**\n     * The function through which smoothed emits are passed.\n     *\n     * @memberof westures-core.Smoothable\n     *\n     * @type {function}\n     * @param {object} data - The data to emit.\n     */\n    this.smooth = null;\n    if (smoothingIsApplicable(options.smoothing)) {\n      this.smooth = this[smooth].bind(this);\n    } else {\n      this.smooth = data => data;\n    }\n\n    /**\n     * The \"identity\" value of the data that will be smoothed.\n     *\n     * @memberof westures-core.Smoothable\n     *\n     * @type {*}\n     * @default 0\n     */\n    this.identity = 0;\n\n    /**\n     * Stage the emitted data once.\n     *\n     * @private\n     * @static\n     * @memberof westures-core.Smoothable\n     *\n     * @alias [@@cascade]\n     * @type {object}\n     */\n    this[cascade] = this.identity;\n  }\n\n  /**\n   * Restart the Smoothable gesture.\n   *\n   * @memberof westures-core.Smoothable\n   */\n  restart() {\n    this[cascade] = this.identity;\n  }\n\n  /**\n   * Smooth out the outgoing data.\n   *\n   * @private\n   * @memberof westures-core.Smoothable\n   *\n   * @param {object} next - The next batch of data to emit.\n   * @param {string} field - The field to which smoothing should be applied.\n   *\n   * @return {?object}\n   */\n  [smooth](next, field) {\n    const avg = this.smoothingAverage(this[cascade], next[field]);\n    this[cascade] = avg;\n    next[field] = avg;\n    return next;\n  }\n\n  /**\n   * Average out two values, as part of the smoothing algorithm.\n   *\n   * @private\n   * @memberof westures-core.Smoothable\n   *\n   * @param {number} a\n   * @param {number} b\n   *\n   * @return {number} The average of 'a' and 'b'\n   */\n  smoothingAverage(a, b) {\n    return (a + b) / 2;\n  }\n};\n\nmodule.exports = Smoothable;\n\n","/**\n * The global API interface for Westures. Exposes a constructor for the Region\n * and the generic Gesture class for user gestures to implement, as well as the\n * Point2D class, which may be useful.\n *\n * @namespace westures-core\n */\n\n'use strict';\n\nconst Gesture = require('./src/Gesture.js');\nconst Point2D = require('./src/Point2D.js');\nconst Region = require('./src/Region.js');\nconst Smoothable = require('./src/Smoothable.js');\n\nmodule.exports = {\n  Gesture,\n  Point2D,\n  Region,\n  Smoothable,\n};\n\n","/*\n * Contains the Pan class.\n */\n\n'use strict';\n\nconst { Gesture, Point2D, Smoothable } = require('westures-core');\n\n/**\n * Data returned when a Pan is recognized.\n *\n * @typedef {Object} PanData\n * @mixes ReturnTypes.BaseData\n *\n * @property {westures.Point2D} translation - The change vector from the last\n * emit.\n *\n * @memberof ReturnTypes\n */\n\n/**\n * A Pan is defined as a normal movement in any direction.\n *\n * @extends westures.Gesture\n * @mixes westures.Smoothable\n * @see ReturnTypes.PanData\n * @memberof westures\n */\nclass Pan extends Smoothable(Gesture) {\n  /**\n   * @param {Object} [options]\n   * @param {string} [options.muteKey=undefined] - If this key is pressed, this\n   *    gesture will be muted (i.e. not recognized). One of 'altKey', 'ctrlKey',\n   *    'shiftKey', or 'metaKey'.\n   */\n  constructor(options = {}) {\n    const settings = { ...Pan.DEFAULTS, ...options };\n    super('pan', settings);\n\n    /**\n     * Don't emit any data if this key is pressed.\n     *\n     * @private\n     * @type {string}\n     */\n    this.muteKey = settings.muteKey;\n\n    /**\n     * The minimum number of inputs that must be active for a Pinch to be\n     * recognized.\n     *\n     * @private\n     * @type {number}\n     */\n    this.minInputs = settings.minInputs;\n\n    /**\n     * The previous point location.\n     *\n     * @private\n     * @type {westures.Point2D}\n     */\n    this.previous = null;\n\n    /*\n     * The \"identity\" value for this smoothable gesture.\n     *\n     * @private\n     * @override\n     * @type {westures.Point2D}\n     */\n    this.identity = new Point2D(0, 0);\n  }\n\n  /**\n   * Resets the gesture's progress by saving the current centroid of the active\n   * inputs. To be called whenever the number of inputs changes.\n   *\n   * @private\n   * @param {State} state - The state object received by a hook.\n   */\n  restart(state) {\n    if (state.active.length >= this.minInputs) {\n      this.previous = state.centroid;\n    }\n    super.restart();\n  }\n\n  /**\n   * Event hook for the start of a Pan. Records the current centroid of\n   * the inputs.\n   *\n   * @private\n   * @param {State} state - current input state.\n   */\n  start(state) {\n    this.restart(state);\n  }\n\n  /**\n   * Event hook for the move of a Pan.\n   *\n   * @param {State} state - current input state.\n   * @return {?ReturnTypes.PanData} <tt>null</tt> if the gesture was muted or\n   * otherwise not recognized.\n   */\n  move(state) {\n    if (state.active.length < this.minInputs) {\n      return null;\n    }\n\n    if (this.muteKey && state.event[this.muteKey]) {\n      this.restart(state);\n      return null;\n    }\n\n    const translation = state.centroid.minus(this.previous);\n    this.previous = state.centroid;\n\n    return this.smooth({ translation }, 'translation');\n  }\n\n  /**\n   * Event hook for the end of a Pan. Records the current centroid of\n   * the inputs.\n   *\n   * @private\n   * @param {State} state - current input state.\n   */\n  end(state) {\n    this.restart(state);\n  }\n\n  /**\n   * Event hook for the cancel of a Pan. Resets the current centroid of\n   * the inputs.\n   *\n   * @private\n   * @param {State} state - current input state.\n   */\n  cancel(state) {\n    this.restart(state);\n  }\n\n  /*\n   * Averages out two points.\n   *\n   * @override\n   */\n  smoothingAverage(a, b) {\n    return new Point2D(\n      (a.x + b.x) / 2,\n      (a.y + b.y) / 2,\n    );\n  }\n}\n\nPan.DEFAULTS = Object.freeze({\n  minInputs: 1,\n  smoothing: true,\n});\n\nmodule.exports = Pan;\n\n","/*\n * Contains the abstract Pinch class.\n */\n\n'use strict';\n\nconst { Gesture, Smoothable } = require('westures-core');\n\n/**\n * Data returned when a Pinch is recognized.\n *\n * @typedef {Object} PinchData\n * @mixes ReturnTypes.BaseData\n *\n * @property {number} distance - The average distance from an active input to\n *    the centroid.\n * @property {number} scale - The proportional change in distance since last\n * emit.\n *\n * @memberof ReturnTypes\n */\n\n/**\n * A Pinch is defined as two or more inputs moving either together or apart.\n *\n * @extends westures.Gesture\n * @mixes westures.Smoothable\n * @see ReturnTypes.PinchData\n * @memberof westures\n */\nclass Pinch extends Smoothable(Gesture) {\n  /**\n   * @param {Object} [options]\n   * @param {number} [options.minInputs=2] The minimum number of inputs that\n   * must be active for a Pinch to be recognized.\n   */\n  constructor(options = {}) {\n    const settings = { ...Pinch.DEFAULTS, ...options };\n    super('pinch', settings);\n\n    /**\n     * The minimum number of inputs that must be active for a Pinch to be\n     * recognized.\n     *\n     * @private\n     * @type {number}\n     */\n    this.minInputs = settings.minInputs;\n\n    /**\n     * The previous distance.\n     *\n     * @private\n     * @type {number}\n     */\n    this.previous = 0;\n\n    /*\n     * The \"identity\" value for this smoothable gesture.\n     *\n     * @private\n     * @override\n     * @type {number}\n     */\n    this.identity = 1;\n  }\n\n  /**\n   * Initializes the gesture progress and stores it in the first input for\n   * reference events.\n   *\n   * @private\n   * @param {State} state - current input state.\n   */\n  restart(state) {\n    if (state.active.length >= this.minInputs) {\n      const distance = state.centroid.averageDistanceTo(state.activePoints);\n      this.previous = distance;\n    }\n    super.restart();\n  }\n\n  /**\n   * Event hook for the start of a Pinch.\n   *\n   * @private\n   * @param {State} state - current input state.\n   */\n  start(state) {\n    this.restart(state);\n  }\n\n  /**\n   * Event hook for the move of a Pinch.\n   *\n   * @param {State} state - current input state.\n   * @return {?ReturnTypes.PinchData} <tt>null</tt> if not recognized.\n   */\n  move(state) {\n    if (state.active.length < this.minInputs) return null;\n\n    const distance = state.centroid.averageDistanceTo(state.activePoints);\n    const scale = distance / this.previous;\n\n    this.previous = distance;\n    return this.smooth({ distance, scale }, 'scale');\n  }\n\n  /**\n   * Event hook for the end of a Pinch.\n   *\n   * @private\n   * @param {State} input status object\n   */\n  end(state) {\n    this.restart(state);\n  }\n\n  /**\n   * Event hook for the cancel of a Pinch.\n   *\n   * @private\n   * @param {State} input status object\n   */\n  cancel(state) {\n    this.restart(state);\n  }\n}\n\nPinch.DEFAULTS = Object.freeze({\n  minInputs: 2,\n  smoothing: true,\n});\n\nmodule.exports = Pinch;\n\n","/*\n * Contains the Press class.\n */\n\n'use strict';\n\nconst { Gesture } = require('westures-core');\n\n/**\n * Data returned when a Press is recognized.\n *\n * @typedef {Object} PressData\n *\n * @property {westures.Point2D} centroid - The current centroid of the input\n * points.\n * @property {westures.Point2D} initial - The initial centroid of the input\n * points.\n * @property {number} distance - The total movement since initial contact.\n *\n * @memberof ReturnTypes\n */\n\n/**\n * A Press is defined as one or more input points being held down.\n *\n * @extends westures.Gesture\n * @see ReturnTypes.PressData\n * @memberof westures\n */\nclass Press extends Gesture {\n  /**\n   * Constructor function for the Press class.\n   *\n   * @param {function} handler - A Press is unique in that the gesture needs to\n   * store the 'handler' callback directly, so it can be called asynchronously.\n   * @param {Object} [options] - The options object.\n   * @param {number} [options.delay=1000] - The delay before emitting, during\n   * which time the number of inputs must not change.\n   * @param {number} [options.numInputs=1] - Number of inputs for a Press\n   * gesture.\n   * @param {number} [options.tolerance=10] - The tolerance in pixels\n   * a user can move and still allow the gesture to emit.\n   */\n  constructor(handler, options = {}) {\n    super('press');\n    const settings = { ...Press.DEFAULTS, ...options };\n\n    /**\n     * The handler to trigger in case a Press is recognized.\n     *\n     * @private\n     * @type {function}\n     */\n    this.handler = handler;\n\n    /**\n     * The delay before emitting a press event, during which time the number of\n     * inputs must not change.\n     *\n     * @private\n     * @type {number}\n     */\n    this.delay = settings.delay;\n\n    /**\n     * The number of inputs that must be active for a Press to be recognized.\n     *\n     * @private\n     * @type {number}\n     */\n    this.numInputs = settings.numInputs;\n\n    /**\n     * A move tolerance in pixels allows some slop between a user's start to end\n     * events. This allows the Press gesture to be triggered more easily.\n     *\n     * @private\n     * @type {number}\n     */\n    this.tolerance = settings.tolerance;\n\n    /**\n     * The initial centroid.\n     *\n     * @private\n     * @type {westures.Point2D}\n     */\n    this.initial = null;\n\n    /**\n     * Saves the timeout callback reference in case it needs to be cleared for\n     * some reason.\n     *\n     * @private\n     * @type {number}\n     */\n    this.timeout = null;\n  }\n\n  /**\n   * Event hook for the start of a gesture. If the number of active inputs is\n   * correct, initializes the timeout.\n   *\n   * @private\n   * @param {State} state - current input state.\n   */\n  start(state) {\n    if (state.active.length === this.numInputs) {\n      this.initial = state.centroid;\n      this.timeout = setTimeout(() => this.recognize(state), this.delay);\n    }\n  }\n\n  /**\n   * Recognize a Press.\n   *\n   * @private\n   * @param {State} state - current input state.\n   */\n  recognize(state) {\n    const distance = this.initial.distanceTo(state.centroid);\n    if (distance <= this.tolerance) {\n      this.handler({\n        distance,\n        initial:  this.initial,\n        centroid: state.centroid,\n        type:     this.type,\n      });\n    }\n  }\n\n  /**\n   * Event hook for the end of a gesture.\n   *\n   * @private\n   * @param {State} state - current input state.\n   */\n  end() {\n    clearTimeout(this.timeout);\n    this.timeout = null;\n  }\n}\n\nPress.DEFAULTS = Object.freeze({\n  delay:     1000,\n  tolerance: 10,\n  numInputs: 1,\n});\n\nmodule.exports = Press;\n\n","/*\n * Constains the angularMinus() function\n */\n\n'use strict';\n\nconst PI2 = 2 * Math.PI;\n\n/**\n * Helper function to regulate angular differences, so they don't jump from 0 to\n * 2*PI or vice versa.\n *\n * @private\n * @param {number} a - Angle in radians.\n * @param {number} b - Angle in radians.\n * @return {number} c, given by: c = a - b such that || < PI\n */\nfunction angularMinus(a, b = 0) {\n  let diff = a - b;\n  if (diff < -Math.PI) {\n    diff += PI2;\n  } else if (diff > Math.PI) {\n    diff -= PI2;\n  }\n  return diff;\n}\n\nmodule.exports = angularMinus;\n\n","/*\n * Contains the Rotate class.\n */\n\n'use strict';\n\nconst { Gesture, Smoothable } = require('westures-core');\nconst angularMinus = require('./angularMinus.js');\n\n/**\n * Data returned when a Rotate is recognized.\n *\n * @typedef {Object} RotateData\n * @mixes ReturnTypes.BaseData\n *\n * @property {number} rotation - In radians, the change in angle since last\n * emit.\n *\n * @memberof ReturnTypes\n */\n\n/**\n * A Rotate is defined as two inputs moving with a changing angle between them.\n *\n * @extends westures.Gesture\n * @mixes westures.Smoothable\n * @see ReturnTypes.RotateData\n * @memberof westures\n */\nclass Rotate extends Smoothable(Gesture) {\n  /**\n   * @param {Object} [options]\n   * @param {number} [options.minInputs=2] The minimum number of inputs that\n   * must be active for a Rotate to be recognized.\n   * @param {boolean} [options.smoothing=true] Whether to apply smoothing to\n   * emitted data.\n   */\n  constructor(options = {}) {\n    const settings = { ...Rotate.DEFAULTS, ...options };\n    super('rotate', settings);\n\n    /**\n     * The minimum number of inputs that must be active for a Pinch to be\n     * recognized.\n     *\n     * @private\n     * @type {number}\n     */\n    this.minInputs = settings.minInputs;\n\n    /**\n     * Track the previously emitted rotation angle.\n     *\n     * @private\n     * @type {number[]}\n     */\n    this.previousAngles = [];\n  }\n\n  /**\n   * Store individual angle progress on each input, return average angle change.\n   *\n   * @private\n   * @param {State} state - current input state.\n   */\n  getAngle(state) {\n    if (state.active.length < this.minInputs) return null;\n\n    let angle = 0;\n    const stagedAngles = [];\n\n    state.active.forEach((input, idx) => {\n      const currentAngle = state.centroid.angleTo(input.current.point);\n      angle += angularMinus(currentAngle, this.previousAngles[idx]);\n      stagedAngles[idx] = currentAngle;\n    });\n\n    angle /= (state.active.length);\n    this.previousAngles = stagedAngles;\n    return angle;\n  }\n\n  /**\n   * Restart the gesture;\n   *\n   * @private\n   * @param {State} state - current input state.\n   */\n  restart(state) {\n    this.previousAngles = [];\n    this.getAngle(state);\n    super.restart();\n  }\n\n  /**\n   * Event hook for the start of a gesture.\n   *\n   * @private\n   * @param {State} state - current input state.\n   */\n  start(state) {\n    this.restart(state);\n  }\n\n  /**\n   * Event hook for the move of a Rotate gesture.\n   *\n   * @param {State} state - current input state.\n   * @return {?ReturnTypes.RotateData} <tt>null</tt> if this event did not occur\n   */\n  move(state) {\n    const rotation = this.getAngle(state);\n    if (rotation) {\n      return this.smooth({ rotation }, 'rotation');\n    }\n    return null;\n  }\n\n  /**\n   * Event hook for the end of a gesture.\n   *\n   * @private\n   * @param {State} state - current input state.\n   */\n  end(state) {\n    this.restart(state);\n  }\n\n  /**\n   * Event hook for the cancel of a gesture.\n   *\n   * @private\n   * @param {State} state - current input state.\n   */\n  cancel(state) {\n    this.restart(state);\n  }\n}\n\nRotate.DEFAULTS = Object.freeze({\n  minInputs: 2,\n  smoothing: true,\n});\n\nmodule.exports = Rotate;\n\n","/*\n * Contains the Swipe class.\n */\n\n'use strict';\n\nconst { Gesture } = require('westures-core');\n\nconst REQUIRED_INPUTS = 1;\nconst PROGRESS_STACK_SIZE = 7;\nconst MS_THRESHOLD = 300;\n\n/**\n * Data returned when a Swipe is recognized.\n *\n * @typedef {Object} SwipeData\n * @mixes ReturnTypes.BaseData\n *\n * @property {number} velocity - The velocity of the swipe.\n * @property {number} direction - In radians, the direction of the swipe.\n * @property {westures.Point2D} point - The point at which the swipe ended.\n * @property {number} time - The epoch time, in ms, when the swipe ended.\n *\n * @memberof ReturnTypes\n */\n\n/**\n * Calculates the angle of movement along a series of moves.\n *\n * @private\n * @inner\n * @memberof westures.Swipe\n * @see {@link https://en.wikipedia.org/wiki/Mean_of_circular_quantities}\n *\n * @param {{time: number, point: westures-core.Point2D}} moves - The\n * moves list to process.\n * @param {number} vlim - The number of moves to process.\n *\n * @return {number} The angle of the movement.\n */\nfunction calc_angle(moves, vlim) {\n  const point = moves[vlim].point;\n  let sin = 0;\n  let cos = 0;\n  for (let i = 0; i < vlim; ++i) {\n    const angle = moves[i].point.angleTo(point);\n    sin += Math.sin(angle);\n    cos += Math.cos(angle);\n  }\n  sin /= vlim;\n  cos /= vlim;\n  return Math.atan2(sin, cos);\n}\n\n/**\n * Local helper function for calculating the velocity between two timestamped\n * points.\n *\n * @private\n * @inner\n * @memberof westures.Swipe\n *\n * @param {object} start\n * @param {westures.Point2D} start.point\n * @param {number} start.time\n * @param {object} end\n * @param {westures.Point2D} end.point\n * @param {number} end.time\n *\n * @return {number} velocity from start to end point.\n */\nfunction velocity(start, end) {\n  const distance = end.point.distanceTo(start.point);\n  const time = end.time - start.time + 1;\n  return distance / time;\n}\n\n/**\n * Calculates the veloctiy of movement through a series of moves.\n *\n * @private\n * @inner\n * @memberof westures.Swipe\n *\n * @param {{time: number, point: westures-core.Point2D}} moves - The moves list\n * to process.\n * @param {number} vlim - The number of moves to process.\n *\n * @return {number} The velocity of the moves.\n */\nfunction calc_velocity(moves, vlim) {\n  let max = 0;\n  for (let i = 0; i < vlim; ++i) {\n    const current = velocity(moves[i], moves[i + 1]);\n    if (current > max) max = current;\n  }\n  return max;\n}\n\n/**\n * A swipe is defined as input(s) moving in the same direction in an relatively\n * increasing velocity and leaving the screen at some point before it drops\n * below it's escape velocity.\n *\n * @extends westures.Gesture\n * @see ReturnTypes.SwipeData\n * @memberof westures\n */\nclass Swipe extends Gesture {\n  /**\n   * Constructor function for the Swipe class.\n   */\n  constructor() {\n    super('swipe');\n\n    /**\n     * Moves list.\n     *\n     * @private\n     * @type {object[]}\n     */\n    this.moves = [];\n\n    /**\n     * Data to emit when all points have ended.\n     *\n     * @private\n     * @type {ReturnTypes.SwipeData}\n     */\n    this.saved = null;\n  }\n\n  /**\n   * Refresh the swipe state.\n   *\n   * @private\n   */\n  refresh() {\n    this.moves = [];\n    this.saved = null;\n  }\n\n  /**\n   * Event hook for the start of a gesture. Resets the swipe state.\n   *\n   * @private\n   * @param {State} state - current input state.\n   */\n  start() {\n    this.refresh();\n  }\n\n  /**\n   * Event hook for the move of a gesture. Captures an input's x/y coordinates\n   * and the time of it's event on a stack.\n   *\n   * @private\n   * @param {State} state - current input state.\n   */\n  move(state) {\n    if (state.active.length >= REQUIRED_INPUTS) {\n      this.moves.push({\n        time:  Date.now(),\n        point: state.centroid,\n      });\n\n      if (this.moves.length > PROGRESS_STACK_SIZE) {\n        this.moves.splice(0, this.moves.length - PROGRESS_STACK_SIZE);\n      }\n    }\n  }\n\n  /**\n   * Determines if the input's history validates a swipe motion.\n   *\n   * @param {State} state - current input state.\n   * @return {?ReturnTypes.SwipeData} <tt>null</tt> if the gesture is not\n   * recognized.\n   */\n  end(state) {\n    const result = this.getResult();\n    this.moves = [];\n\n    if (state.active.length > 0) {\n      this.saved = result;\n      return null;\n    }\n\n    this.saved = null;\n    return this.validate(result);\n  }\n\n  /**\n   * Event hook for the cancel phase of a Swipe.\n   *\n   * @private\n   * @param {State} state - current input state.\n   */\n  cancel() {\n    this.refresh();\n  }\n\n  /**\n   * Get the swipe result.\n   *\n   * @private\n   */\n  getResult() {\n    if (this.moves.length < PROGRESS_STACK_SIZE) {\n      return this.saved;\n    }\n    const vlim = PROGRESS_STACK_SIZE - 1;\n    const { point, time } = this.moves[vlim];\n    const velocity = calc_velocity(this.moves, vlim);\n    const direction = calc_angle(this.moves, vlim);\n    const centroid = point;\n    return { point, velocity, direction, time, centroid };\n  }\n\n  /**\n   * Validates that an emit should occur with the given data.\n   *\n   * @private\n   * @param {?ReturnTypes.SwipeData} data\n   */\n  validate(data) {\n    if (data == null) return null;\n    return (Date.now() - data.time > MS_THRESHOLD) ? null : data;\n  }\n}\n\nmodule.exports = Swipe;\n\n","/*\n * Contains the Rotate class.\n */\n\n'use strict';\n\nconst { Gesture, Point2D, Smoothable } = require('westures-core');\nconst angularMinus = require('./angularMinus.js');\n\n/**\n * Data returned when a Swivel is recognized.\n *\n * @typedef {Object} SwivelData\n * @mixes ReturnTypes.BaseData\n *\n * @property {number} rotation - In radians, the change in angle since last\n * emit.\n * @property {westures.Point2D} pivot - The pivot point.\n *\n * @memberof ReturnTypes\n */\n\n/**\n * A Swivel is a single input rotating around a fixed point. The fixed point is\n * determined by the input's location at its 'start' phase.\n *\n * @extends westures.Gesture\n * @mixes westures.Smoothable\n * @see ReturnTypes.SwivelData\n * @memberof westures\n */\nclass Swivel extends Smoothable(Gesture) {\n  /**\n   * Constructor for the Swivel class.\n   *\n   * @param {Object} [options]\n   * @param {number} [options.deadzoneRadius=10] - The radius in pixels around\n   * the start point in which to do nothing.\n   * @param {string} [options.enableKey=null] - One of 'altKey', 'ctrlKey',\n   * 'metaKey', or 'shiftKey'. If set, gesture will only be recognized while\n   * this key is down.\n   * @param {number} [options.minInputs=1] - The minimum number of inputs that\n   * must be active for a Swivel to be recognized.\n   * @param {Element} [options.pivotCenter] - If set, the swivel's pivot point\n   * will be set to the center of the given pivotCenter element. Otherwise, the\n   * pivot will be the location of the first contact point.\n   */\n  constructor(options = {}) {\n    const settings = { ...Swivel.DEFAULTS, ...options };\n    super('swivel', settings);\n\n    /**\n     * The radius around the start point in which to do nothing.\n     *\n     * @private\n     * @type {number}\n     */\n    this.deadzoneRadius = settings.deadzoneRadius;\n\n    /**\n     * If this is set, gesture will only respond to events where this property\n     * is truthy. Should be one of 'ctrlKey', 'altKey', or 'shiftKey'.\n     *\n     * @private\n     * @type {string}\n     */\n    this.enableKey = settings.enableKey;\n\n    /**\n     * The minimum number of inputs that must be active for a Swivel to be\n     * recognized.\n     *\n     * @private\n     * @type {number}\n     */\n    this.minInputs = settings.minInputs;\n\n    /**\n     * If this is set, the swivel will use the center of the element as its\n     * pivot point. Unreliable if the element is moved during a swivel gesture.\n     *\n     * @private\n     * @type {Element}\n     */\n    this.pivotCenter = settings.pivotCenter;\n\n    /**\n     * The pivot point of the swivel.\n     *\n     * @private\n     * @type {westures.Point2D}\n     */\n    this.pivot = null;\n\n    /**\n     * The previous angle.\n     *\n     * @private\n     * @type {number}\n     */\n    this.previous = 0;\n\n    /**\n     * Whether the swivel is active.\n     *\n     * @private\n     * @type {boolean}\n     */\n    this.isActive = false;\n  }\n\n  /**\n   * Returns whether this gesture is currently enabled.\n   *\n   * @private\n   * @param {Event} event - The state's current input event.\n   * @return {boolean} true if the gesture is enabled, false otherwise.\n   */\n  enabled(event) {\n    return !this.enableKey || event[this.enableKey];\n  }\n\n  /**\n   * Restart the given progress object using the given input object.\n   *\n   * @private\n   * @param {State} state - current input state.\n   */\n  restart(state) {\n    this.isActive = true;\n    if (this.pivotCenter) {\n      const rect = this.pivotCenter.getBoundingClientRect();\n      this.pivot = new Point2D(\n        rect.left + (rect.width / 2),\n        rect.top + (rect.height / 2)\n      );\n      this.previous = this.pivot.angleTo(state.centroid);\n    } else {\n      this.pivot = state.centroid;\n      this.previous = 0;\n    }\n    super.restart();\n  }\n\n  /**\n   * Refresh the gesture.\n   *\n   * @private\n   * @param {westures.Input[]} inputs - Input list to process.\n   * @param {State} state - current input state.\n   */\n  refresh(inputs, state) {\n    if (inputs.length >= this.minInputs && this.enabled(state.event)) {\n      this.restart(state);\n    }\n  }\n\n  /**\n   * Event hook for the start of a Swivel gesture.\n   *\n   * @private\n   * @param {State} state - current input state.\n   */\n  start(state) {\n    this.refresh(state.getInputsInPhase('start'), state);\n  }\n\n  /**\n   * Determine the data to emit. To be called once valid state for a swivel has\n   * been assured, except for deadzone.\n   *\n   * @private\n   * @param {State} state - current input state.\n   * @return {?Returns.SwivelData} Data to emit.\n   */\n  calculateOutput(state) {\n    const pivot = this.pivot;\n    const angle = pivot.angleTo(state.centroid);\n    const rotation = angularMinus(angle, this.previous);\n\n    /*\n     * Updating the previous angle regardless of emit prevents sudden flips when\n     * the user exits the deadzone circle.\n     */\n    this.previous = angle;\n\n    if (pivot.distanceTo(state.centroid) > this.deadzoneRadius) {\n      return { rotation, pivot };\n    }\n    return null;\n  }\n\n  /**\n   * Event hook for the move of a Swivel gesture.\n   *\n   * @param {State} state - current input state.\n   * @return {?ReturnTypes.SwivelData} <tt>null</tt> if the gesture is not\n   * recognized.\n   */\n  move(state) {\n    if (state.active.length < this.minInputs) return null;\n\n    if (this.enabled(state.event)) {\n      if (this.isActive) {\n        const output = this.calculateOutput(state);\n        return output ? this.smooth(output, 'rotation') : null;\n      }\n\n      // The enableKey was just pressed again.\n      this.refresh(state.active, state);\n    } else {\n      // The enableKey was released, therefore pivot point is now invalid.\n      this.isActive = false;\n    }\n\n    return null;\n  }\n\n  /**\n   * Event hook for the end of a Swivel.\n   *\n   * @private\n   * @param {State} state - current input state.\n   */\n  end(state) {\n    this.refresh(state.active, state);\n  }\n\n  /**\n   * Event hook for the cancel of a Swivel.\n   *\n   * @private\n   * @param {State} state - current input state.\n   */\n  cancel(state) {\n    this.end(state);\n  }\n}\n\n/**\n * The default options for a Swivel gesture.\n */\nSwivel.DEFAULTS = Object.freeze({\n  deadzoneRadius: 15,\n  enableKey:      null,\n  minInputs:      1,\n  pivotCenter:    false,\n});\n\n\nmodule.exports = Swivel;\n\n","/*\n * Contains the Tap class.\n */\n\n'use strict';\n\nconst { Gesture, Point2D } = require('westures-core');\n\nconst defaults = Object.freeze({\n  MIN_DELAY_MS:      0,\n  MAX_DELAY_MS:      300,\n  NUM_INPUTS:        1,\n  MOVE_PX_TOLERANCE: 10,\n});\n\n/**\n * Data returned when a Tap is recognized.\n *\n * @typedef {Object} TapData\n * @mixes ReturnTypes.BaseData\n *\n * @property {number} x - x coordinate of tap point.\n * @property {number} y - y coordinate of tap point.\n *\n * @memberof ReturnTypes\n */\n\n/**\n * A Tap is defined as a touchstart to touchend event in quick succession.\n *\n * @extends westures.Gesture\n * @see ReturnTypes.TapData\n * @memberof westures\n */\nclass Tap extends Gesture {\n  /**\n   * Constructor function for the Tap class.\n   *\n   * @param {Object} [options] - The options object.\n   * @param {number} [options.minDelay=0] - The minimum delay between a\n   *    touchstart and touchend can be configured in milliseconds.\n   * @param {number} [options.maxDelay=300] - The maximum delay between a\n   *    touchstart and touchend can be configured in milliseconds.\n   * @param {number} [options.numInputs=1] - Number of inputs for Tap gesture.\n   * @param {number} [options.tolerance=10] - The tolerance in pixels a user can\n   *    move.\n   */\n  constructor(options = {}) {\n    super('tap');\n\n    /**\n     * The minimum amount between a touchstart and a touchend can be configured\n     * in milliseconds. The minimum delay starts to count down when the expected\n     * number of inputs are on the screen, and ends when ALL inputs are off the\n     * screen.\n     *\n     * @private\n     * @type {number}\n     */\n    this.minDelay = options.minDelay || defaults.MIN_DELAY_MS;\n\n    /**\n     * The maximum delay between a touchstart and touchend can be configured in\n     * milliseconds. The maximum delay starts to count down when the expected\n     * number of inputs are on the screen, and ends when ALL inputs are off the\n     * screen.\n     *\n     * @private\n     * @type {number}\n     */\n    this.maxDelay = options.maxDelay || defaults.MAX_DELAY_MS;\n\n    /**\n     * The number of inputs to trigger a Tap can be variable, and the maximum\n     * number being a factor of the browser.\n     *\n     * @private\n     * @type {number}\n     */\n    this.numInputs = options.numInputs || defaults.NUM_INPUTS;\n\n    /**\n     * A move tolerance in pixels allows some slop between a user's start to end\n     * events. This allows the Tap gesture to be triggered more easily.\n     *\n     * @private\n     * @type {number}\n     */\n    this.tolerance = options.tolerance || defaults.MOVE_PX_TOLERANCE;\n\n    /**\n     * An array of inputs that have ended recently.\n     *\n     * @private\n     * @type {Input[]}\n     */\n    this.ended = [];\n  }\n\n  /**\n   * Event hook for the end of a gesture.  Determines if this the tap event can\n   * be fired if the delay and tolerance constraints are met.\n   *\n   * @param {State} state - current input state.\n   * @return {?ReturnTypes.TapData} <tt>null</tt> if the gesture is not to be\n   * emitted, Object with information otherwise.\n   */\n  end(state) {\n    const now = Date.now();\n\n    // Save the recently ended inputs.\n    this.ended = this.ended.concat(state.getInputsInPhase('end'))\n      .filter(input => {\n        const tdiff = now - input.startTime;\n        return tdiff <= this.maxDelay && tdiff >= this.minDelay;\n      });\n\n    // Validate the list of ended inputs.\n    if (this.ended.length !== this.numInputs ||\n        this.ended.some(i => i.totalDistance() > this.tolerance)) {\n      return null;\n    }\n\n    const centroid = Point2D.centroid(this.ended.map(i => i.current.point));\n    this.ended = []; // Critical! Used inputs need to be cleared!\n    return { centroid, ...centroid };\n  }\n}\n\nmodule.exports = Tap;\n\n","/*\n * Contains the Track class.\n */\n\n'use strict';\n\nconst { Gesture } = require('westures-core');\n\n/**\n * Data returned when a Track is recognized.\n *\n * @typedef {Object} TrackData\n * @mixes ReturnTypes.BaseData\n *\n * @property {westures.Point2D[]} active - Points currently in 'start' or 'move'\n *    phase.\n * @property {westures.Point2D} centroid - centroid of currently active points.\n *\n * @memberof ReturnTypes\n */\n\n/**\n * A Track gesture forwards a list of active points and their centroid on each\n * of the selected phases.\n *\n * @extends westures.Gesture\n * @see ReturnTypes.TrackData\n * @memberof westures\n */\nclass Track extends Gesture {\n  /**\n   * Constructor for the Track class.\n   *\n   * @param {string[]} [phases=[]] Phases to recognize. Entries can be any or\n   *    all of 'start', 'move', 'end', and 'cancel'.\n   */\n  constructor(phases = []) {\n    super('track');\n    this.trackStart  = phases.includes('start');\n    this.trackMove   = phases.includes('move');\n    this.trackEnd    = phases.includes('end');\n    this.trackCancel = phases.includes('cancel');\n  }\n\n  /**\n   * @private\n   * @param {State} state - current input state.\n   * @return {ReturnTypes.TrackData}\n   */\n  data({ activePoints, centroid }) {\n    return { active: activePoints, centroid };\n  }\n\n  /**\n   * Event hook for the start of a Track gesture.\n   *\n   * @param {State} state - current input state.\n   * @return {?ReturnTypes.TrackData} <tt>null</tt> if not recognized.\n   */\n  start(state) {\n    return this.trackStart ? this.data(state) : null;\n  }\n\n  /**\n   * Event hook for the move of a Track gesture.\n   *\n   * @param {State} state - current input state.\n   * @return {?ReturnTypes.TrackData} <tt>null</tt> if not recognized.\n   */\n  move(state) {\n    return this.trackMove ? this.data(state) : null;\n  }\n\n  /**\n   * Event hook for the end of a Track gesture.\n   *\n   * @param {State} state - current input state.\n   * @return {?ReturnTypes.TrackData} <tt>null</tt> if not recognized.\n   */\n  end(state) {\n    return this.trackEnd ? this.data(state) : null;\n  }\n\n  /**\n   * Event hook for the cancel of a Track gesture.\n   *\n   * @param {State} state - current input state.\n   * @return {?ReturnTypes.TrackData} <tt>null</tt> if not recognized.\n   */\n  cancel(state) {\n    return this.trackCancel ? this.data(state) : null;\n  }\n}\n\nmodule.exports = Track;\n\n","/**\n * The API interface for Westures. Defines a number of gestures on top of the\n * engine provided by {@link\n * https://mvanderkamp.github.io/westures-core/index.html|westures-core}.\n *\n * @namespace westures \n */\n\n'use strict';\n\nconst { Gesture, Point2D, Region, Smoothable } = require('westures-core');\n\nconst Pan     = require('./src/Pan.js');\nconst Pinch   = require('./src/Pinch.js');\nconst Press   = require('./src/Press.js');\nconst Rotate  = require('./src/Rotate.js');\nconst Swipe   = require('./src/Swipe.js');\nconst Swivel  = require('./src/Swivel.js');\nconst Tap     = require('./src/Tap.js');\nconst Track   = require('./src/Track.js');\n\nmodule.exports = {\n  Gesture,\n  Point2D,\n  Region,\n  Smoothable,\n  Pan,\n  Pinch,\n  Press,\n  Rotate,\n  Swipe,\n  Swivel,\n  Tap,\n  Track,\n};\n\n/**\n * Here are the return \"types\" of the gestures that are included in this\n * package.\n *\n * @namespace ReturnTypes\n */\n\n/**\n * The base Gesture class which all other classes extend.\n *\n * @see {@link\n * https://mvanderkamp.github.io/westures-core/westures-core.Gesture.html|\n * westures-core.Gesture}\n *\n * @class Gesture\n * @memberof westures\n */\n\n/**\n * The Region class, which is the entry point for the Westures system, through\n * which you bind handlers with gestures and elements.\n *\n * @see {@link\n * https://mvanderkamp.github.io/westures-core/westures-core.Region.html|\n * westures-core.Region}\n *\n * @class Region\n * @memberof westures\n */\n\n/**\n * Provides some basic operations on two-dimensional points.\n *\n * @see {@link\n * https://mvanderkamp.github.io/westures-core/westures-core.Point2D.html|\n * westures-core.Point2D}\n *\n * @class Point2D\n * @memberof westures\n */\n\n/**\n * Allows the enabling of smoothing on Gestures that use this mixin.\n *\n * @see {@link\n * https://mvanderkamp.github.io/westures-core/westures-core.Smoothable.html|\n * westures-core.Smoothable}\n *\n * @mixin Smoothable\n * @memberof westures\n */\n\n/**\n * The base data that is included for all emitted gestures.\n *\n * @typedef {Object} BaseData\n *\n * @property {westures.Point2D} centroid - The centroid of the input points.\n * @property {Event} event - The input event which caused the gesture to be\n * recognized.\n * @property {string} phase - 'start', 'move', 'end', or 'cancel'.\n * @property {number} radius - The distance of the furthest input to the\n * centroid.\n * @property {string} type - The name of the gesture as specified by its\n * designer.\n * @property {Element} target - The bound target of the gesture.\n *\n * @memberof ReturnTypes\n */\n\n","'use strict';\n\nconst westures = require('westures');\nconst region = new westures.Region(document.body);\nconst container = document.querySelector('#container');\n\nconst SIXTY_FPS = 1000 / 60;\nconst FRICTION = 0.95;\nconst MULTI = 7;\nconst LIMIT = 0.1;\nconst MAX_V = 7;\n\nfunction random8Bit() {\n  return Math.floor(Math.random() * 256);\n}\n\nfunction reduce(value) {\n  value *= FRICTION;\n  return (Math.abs(value) < LIMIT) ? 0 : value;\n}\n\nclass Interactable {\n  constructor(name, color) {\n    this.element = document.createElement('div');\n    this.element.style.backgroundColor = color;\n\n    this.label = document.createElement('h1');\n    this.label.innerText = name;\n\n    this.element.appendChild(this.label);\n    container.appendChild(this.element);\n\n    this.rotation = 0;\n    this.scale = 1;\n    this.x = 0;\n    this.y = 0;\n    this.velocityX = 0;\n    this.velocityY = 0;\n\n    this.update_interval = null;\n    this.swipe_interval = null;\n    this.animate_swipe = () => {\n      this.x += this.velocityX;\n      this.y += this.velocityY;\n      this.velocityX = reduce(this.velocityX);\n      this.velocityY = reduce(this.velocityY);\n      if (this.velocityY === 0 && this.velocityX === 0) {\n        clearInterval(this.swipe_interval);\n      }\n      this.update();\n    };\n\n    this.setupTracking();\n  }\n\n  setupTracking() {\n    region.addGesture(this.element,\n      new westures.Track(['start', 'end']),\n      (data) => {\n        switch (data.phase) {\n          case 'start':\n            this.update_interval = setInterval(() => this.update(), SIXTY_FPS);\n            clearInterval(this.swipe_interval);\n            break;\n          case 'end':\n            setTimeout(() => clearInterval(this.update_interval), 0);\n            break;\n        }\n      });\n  }\n\n  randomBackground() {\n    const R = random8Bit();\n    const G = random8Bit();\n    const B = random8Bit();\n    this.element.style.backgroundColor = `rgb(${R}, ${G}, ${B})`;\n  }\n\n  addTap(options) {\n    region.addGesture(this.element, new westures.Tap(options), (data) => {\n      this.randomBackground();\n    });\n    return this;\n  }\n\n  addPress(options) {\n    region.addGesture(this.element, new westures.Press((data) => {\n      this.randomBackground();\n    }, options));\n    return this;\n  }\n\n  addRotate(options) {\n    region.addGesture(this.element, new westures.Rotate(options), (data) => {\n      this.rotation += data.rotation;\n    });\n    return this;\n  }\n\n  addPan(options) {\n    region.addGesture(this.element,\n      new westures.Pan(options), \n      (data) => {\n        this.x += data.translation.x;\n        this.y += data.translation.y;\n      });\n    return this;\n  }\n\n  addSwipe(options) {\n    region.addGesture(this.element,\n      new westures.Swipe(options),\n      (data) => {\n        const velocity = data.velocity > MAX_V ? MAX_V : data.velocity;\n        this.velocityX = velocity * Math.cos(data.direction) * MULTI;\n        this.velocityY = velocity * Math.sin(data.direction) * MULTI;\n        this.swipe_interval = setInterval(this.animate_swipe, SIXTY_FPS); \n      });\n    return this;\n  }\n\n  addSwivel(options) {\n    region.addGesture(this.element, \n      new westures.Swivel({\n        pivotCenter: this.element,\n        ...options,\n      }), \n      (data) => {\n        this.rotation += data.rotation;\n      });\n    return this;\n  }\n\n  addPinch(options) {\n    region.addGesture(this.element, new westures.Pinch(options), (data) => {\n      this.scale *= data.scale;\n    });\n    return this;\n  }\n\n  update() {\n    const rotate = `rotate(${this.rotation}rad) `;\n    const translate = `translate(${this.x}px, ${this.y}px) `;\n    const scale = `scale(${this.scale}) `;\n    this.element.style.transform = translate + rotate + scale;\n  }\n}\n\n/* ========================================================================== */\n\nconst NUM_COLOURS = 11;\nconst INTERVAL = Math.floor(360 / NUM_COLOURS);\nconst PALETTE = [];\n\n// Generate a Pastel Rainbow\nfor (let i = 0; i < NUM_COLOURS; i++) {\n  const hue = INTERVAL * i;\n  PALETTE.push(`hsl(${hue}, 100%, 75%)`);\n}\n\nlet cidx = 0;\nfunction nextColour() {\n  return PALETTE[cidx++];\n}\n\n// Basic gestures\nnew Interactable('TAP',    nextColour()).addTap();\nnew Interactable('SWIVEL', nextColour()).addSwivel();\nnew Interactable('PAN',    nextColour()).addPan();\nnew Interactable('PINCH',  nextColour()).addPinch();\nnew Interactable('ROTATE', nextColour()).addRotate();\nnew Interactable('SWIPE',  nextColour()).addSwipe();\nnew Interactable('PRESS',  nextColour()).addPress();\n\n// Mix and match!\n// new Interactable('ROTATE and SWIVEL', 'forestgreen').addRotate().addSwivel();\nnew Interactable(\n  'TAP, PAN, PINCH, SWIPE, and ROTATE\\n(desktop: CTRL to SWIVEL)', \n  nextColour()\n).addTap()\n  .addPan({ muteKey: 'ctrlKey' })\n  .addPinch()\n  .addRotate()\n  .addSwipe()\n  .addSwivel({ enableKey: 'ctrlKey' });\nnew Interactable('DOUBLE TAP', nextColour()).addTap({ \n  numInputs: 2 \n});\nnew Interactable('FIVE TAPS', nextColour()).addTap({ \n  maxDelay: 1000,\n  numInputs: 5.\n});\nnew Interactable('SLOW TAP', nextColour()).addTap({ \n  minDelay: 300,\n  maxDelay: 1000,\n});\n\n"]}